{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b6a9879d",
   "metadata": {},
   "source": [
    "# Insurence price prediction\n",
    "This project is to allows a person to get an idea about the\n",
    "necessary amount required according to their own health status. Later they\n",
    "can comply with any health insurance company and their schemes &\n",
    "benefits keeping in mind the predicted amount from our project"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb7d588d",
   "metadata": {},
   "source": [
    "# The Attributess include:\n",
    "Age: age of the person\n",
    "\n",
    "Sex: Gender of the person [Male,Female]\n",
    "\n",
    "Bmi:Bmi of the person\n",
    "\n",
    "Smoker:whether the person is smoker or not [yes,no]\n",
    "\n",
    "Region:region the person[southeast,\n",
    "southwest,\n",
    "northwest,\n",
    "northeast]\n",
    "\n",
    "Charges:charges for the person"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3cb2bb7",
   "metadata": {},
   "source": [
    "# Importing Necessary Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ac9d8944",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0125a03e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loading the data\n",
    "\n",
    "data=pd.read_csv(\"C:/Users/DELL LYF/Documents/insurance.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "78073995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     sex     bmi  children smoker     region      charges\n",
       "0   19  female  27.900         0    yes  southwest  16884.92400\n",
       "1   18    male  33.770         1     no  southeast   1725.55230\n",
       "2   28    male  33.000         3     no  southeast   4449.46200\n",
       "3   33    male  22.705         0     no  northwest  21984.47061\n",
       "4   32    male  28.880         0     no  northwest   3866.85520"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#inspecting the first 5 rows\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b5d77a7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>male</td>\n",
       "      <td>30.97</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>10600.5483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>31.92</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northeast</td>\n",
       "      <td>2205.9808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>36.85</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1629.8335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>female</td>\n",
       "      <td>25.80</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southwest</td>\n",
       "      <td>2007.9450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>female</td>\n",
       "      <td>29.07</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>northwest</td>\n",
       "      <td>29141.3603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age     sex    bmi  children smoker     region     charges\n",
       "1333   50    male  30.97         3     no  northwest  10600.5483\n",
       "1334   18  female  31.92         0     no  northeast   2205.9808\n",
       "1335   18  female  36.85         0     no  southeast   1629.8335\n",
       "1336   21  female  25.80         0     no  southwest   2007.9450\n",
       "1337   61  female  29.07         0    yes  northwest  29141.3603"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "#last 5 rows\n",
    "\n",
    "data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "050e0abc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "bmi         0\n",
       "children    0\n",
       "smoker      0\n",
       "region      0\n",
       "charges     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking the  number of missing values\n",
    "\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f38eab0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1338 entries, 0 to 1337\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       1338 non-null   int64  \n",
      " 1   sex       1338 non-null   object \n",
      " 2   bmi       1338 non-null   float64\n",
      " 3   children  1338 non-null   int64  \n",
      " 4   smoker    1338 non-null   object \n",
      " 5   region    1338 non-null   object \n",
      " 6   charges   1338 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(3)\n",
      "memory usage: 73.3+ KB\n"
     ]
    }
   ],
   "source": [
    "#getting some information about the data set\n",
    "\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e4dab8a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 7)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking the number of rows and columns\n",
    "\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fca02f7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "      <td>1338.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>39.207025</td>\n",
       "      <td>30.663397</td>\n",
       "      <td>1.094918</td>\n",
       "      <td>13270.422265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.049960</td>\n",
       "      <td>6.098187</td>\n",
       "      <td>1.205493</td>\n",
       "      <td>12110.011237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1121.873900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>26.296250</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4740.287150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>39.000000</td>\n",
       "      <td>30.400000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9382.033000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>34.693750</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>16639.912515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>64.000000</td>\n",
       "      <td>53.130000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>63770.428010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age          bmi     children       charges\n",
       "count  1338.000000  1338.000000  1338.000000   1338.000000\n",
       "mean     39.207025    30.663397     1.094918  13270.422265\n",
       "std      14.049960     6.098187     1.205493  12110.011237\n",
       "min      18.000000    15.960000     0.000000   1121.873900\n",
       "25%      27.000000    26.296250     0.000000   4740.287150\n",
       "50%      39.000000    30.400000     1.000000   9382.033000\n",
       "75%      51.000000    34.693750     2.000000  16639.912515\n",
       "max      64.000000    53.130000     5.000000  63770.428010"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#describing the dataset\n",
    "\n",
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69fd7cf",
   "metadata": {},
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36535e17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='age', ylabel='charges'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualization for charges and age\n",
    "sns.lineplot(data=data,x='age',y='charges')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c692b205",
   "metadata": {},
   "source": [
    "# Observation\n",
    "\n",
    "In the age of 40 to 60 have the high charges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79ba46e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DELL LYF\\AppData\\Local\\Temp\\ipykernel_10060\\3303687566.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(data['charges'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='charges', ylabel='Density'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['charges'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceaaac04",
   "metadata": {},
   "source": [
    "# Observation\n",
    "\n",
    "we have high charges as 10000 to 20000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1c3f4162",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization between smoker and count\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.countplot(x='smoker',data=data)\n",
    "plt.title('smoker')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f912b88c",
   "metadata": {},
   "source": [
    "# Observation\n",
    "\n",
    "In smoker column we have high non smokers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a6302503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualization between region and count\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.countplot(x='region', data=data)\n",
    "plt.title('region')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1e73ffae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualization between region and count\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.barplot(x='region',y='charges',data=data)\n",
    "plt.title('charges distribution on region')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe3afb11",
   "metadata": {},
   "source": [
    "# \n",
    "\n",
    "Here we can see about the region charges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3d86b968",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "southeast    364\n",
       "southwest    325\n",
       "northwest    325\n",
       "northeast    324\n",
       "Name: region, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#counts of region\n",
    "data['region'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9b9daec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#Visualization between sex distribution and count\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.countplot(x='sex', data=data)\n",
    "plt.title('Sex Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7f3b2886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualization of children count\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.countplot(x='children', data=data)\n",
    "plt.title('Children')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f78c4567",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1db86221",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DELL LYF\\AppData\\Local\\Temp\\ipykernel_10060\\2852162216.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(data['bmi'])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# bmi distribution\n",
    "plt.figure(figsize=(6,6))\n",
    "sns.distplot(data['bmi'])\n",
    "plt.title('BMI Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd95ad2",
   "metadata": {},
   "source": [
    "# Observation\n",
    "\n",
    "In bmi we have 20 - 40 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "848e08a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    574\n",
       "1    324\n",
       "2    240\n",
       "3    157\n",
       "4     25\n",
       "5     18\n",
       "Name: children, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#children counts\n",
    "data['children'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a81a6d81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "male      676\n",
       "female    662\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#male ,female counts\n",
    "data['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2c012299",
   "metadata": {},
   "outputs": [],
   "source": [
    "#encoding\n",
    "data.replace({'sex':{'male':0,'female':1}},inplace=True)\n",
    "data.replace({'smoker':{'yes':0,'no':1}},inplace=True)\n",
    "data.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "40c97f57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex     bmi  children  smoker  region      charges\n",
       "0   19    1  27.900         0       0       1  16884.92400\n",
       "1   18    0  33.770         1       1       0   1725.55230\n",
       "2   28    0  33.000         3       1       0   4449.46200\n",
       "3   33    0  22.705         0       1       3  21984.47061\n",
       "4   32    0  28.880         0       1       3   3866.85520"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12147e49",
   "metadata": {},
   "source": [
    "# spliting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b20b104e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "x=data[['age','sex','bmi','children','smoker','region']]\n",
    "y=data['charges']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5ee9f6a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>30.970</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>31.920</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>36.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>25.800</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>29.070</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex     bmi  children  smoker  region\n",
       "0      19    1  27.900         0       0       1\n",
       "1      18    0  33.770         1       1       0\n",
       "2      28    0  33.000         3       1       0\n",
       "3      33    0  22.705         0       1       3\n",
       "4      32    0  28.880         0       1       3\n",
       "...   ...  ...     ...       ...     ...     ...\n",
       "1333   50    0  30.970         3       1       3\n",
       "1334   18    1  31.920         0       1       2\n",
       "1335   18    1  36.850         0       1       0\n",
       "1336   21    1  25.800         0       1       1\n",
       "1337   61    1  29.070         0       0       3\n",
       "\n",
       "[1338 rows x 6 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "205eaed6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e1f05463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.43876426  1.0105187  -0.45332    -0.90861367 -1.97058663 -0.40328924]\n",
      " [-1.50996545 -0.98959079  0.5096211  -0.07876719  0.5074631  -1.28788104]\n",
      " [-0.79795355 -0.98959079  0.38330685  1.58092576  0.5074631  -1.28788104]\n",
      " ...\n",
      " [-1.50996545  1.0105187   1.0148781  -0.90861367  0.5074631  -1.28788104]\n",
      " [-1.29636188  1.0105187  -0.79781341 -0.90861367  0.5074631  -0.40328924]\n",
      " [ 1.55168573  1.0105187  -0.26138796 -0.90861367 -1.97058663  1.36589436]]\n"
     ]
    }
   ],
   "source": [
    "std = StandardScaler()\n",
    "std.fit(x)\n",
    "std_data= std.transform(x)\n",
    "print(std_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "891542da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       16884.92400\n",
       "1        1725.55230\n",
       "2        4449.46200\n",
       "3       21984.47061\n",
       "4        3866.85520\n",
       "           ...     \n",
       "1333    10600.54830\n",
       "1334     2205.98080\n",
       "1335     1629.83350\n",
       "1336     2007.94500\n",
       "1337    29141.36030\n",
       "Name: charges, Length: 1338, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "859c924e",
   "metadata": {},
   "source": [
    "# Test-Train Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c09c0f2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#spliting the data into train and test\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "47c60050",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>578</th>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>30.200</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>29.370</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>569</th>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>40.565</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1034</th>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>38.380</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>18.050</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1261</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>37.100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>494</th>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>25.700</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>38.280</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>418</th>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>39.160</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>25.000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex     bmi  children  smoker  region\n",
       "578    52    0  30.200         1       1       1\n",
       "610    47    1  29.370         1       1       0\n",
       "569    48    0  40.565         2       0       3\n",
       "1034   61    0  38.380         0       1       3\n",
       "198    51    1  18.050         0       1       3\n",
       "...   ...  ...     ...       ...     ...     ...\n",
       "1261   28    0  37.100         1       1       1\n",
       "494    21    0  25.700         4       0       1\n",
       "97     55    0  38.280         0       1       0\n",
       "418    64    0  39.160         1       1       0\n",
       "920    62    1  25.000         0       1       1\n",
       "\n",
       "[402 rows x 6 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2af360ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "578      9724.53000\n",
       "610      8547.69130\n",
       "569     45702.02235\n",
       "1034    12950.07120\n",
       "198      9644.25250\n",
       "           ...     \n",
       "1261     3277.16100\n",
       "494     17942.10600\n",
       "97      10226.28420\n",
       "418     14418.28040\n",
       "920     13451.12200\n",
       "Name: charges, Length: 402, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8acae947",
   "metadata": {},
   "source": [
    "# Linear Regression\n",
    "Linear regression is a type of supervised machine learning algorithm that computes the linear relationship between a dependent variable and one or more independent features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "aaf0bace",
   "metadata": {},
   "outputs": [],
   "source": [
    "ln=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5c1491b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Training data is used for model building\n",
    "ln.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b902781f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#testing data used for prediction\n",
    "predicted_test=ln.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4b34863b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.13604899e+04,  9.63047343e+03,  3.81065737e+04,  1.63338141e+04,\n",
       "        7.05272954e+03,  3.54684209e+03,  1.11492011e+03,  1.45452227e+04,\n",
       "        9.15653214e+03,  7.60590109e+03,  4.20016236e+03,  1.04451514e+04,\n",
       "        8.98646549e+03,  3.88683626e+03,  2.77711850e+04,  1.09358292e+04,\n",
       "        1.14088811e+04,  5.65105775e+03,  8.33593364e+03,  2.64917277e+04,\n",
       "        3.36411266e+04,  1.45093087e+04,  1.13603693e+04,  3.20999735e+04,\n",
       "        4.16595995e+03,  8.80051482e+03,  6.86565582e+02,  9.97470268e+03,\n",
       "        3.84800169e+03,  1.05436257e+04,  9.16548540e+03,  4.00322662e+04,\n",
       "        1.58507371e+04,  1.40198816e+04,  2.41808796e+04,  4.73281638e+03,\n",
       "        1.27268799e+04,  3.07047328e+04,  3.35025676e+04,  3.74040233e+03,\n",
       "        3.59264482e+03,  4.02796889e+03,  2.99517120e+04,  3.94760782e+04,\n",
       "        2.76473213e+04,  5.14254175e+03,  1.08262644e+04,  7.91704638e+03,\n",
       "        3.21404415e+03,  1.04089920e+04,  5.23768356e+03,  3.52019211e+03,\n",
       "        3.30519647e+04,  3.80078950e+04,  1.61504863e+04,  6.67412103e+03,\n",
       "        5.74101493e+03,  9.53471440e+03,  9.16147748e+03,  1.18772163e+04,\n",
       "        1.91947797e+03,  3.89529955e+04,  1.51105293e+04,  1.20124403e+04,\n",
       "        1.37466989e+04,  1.42282674e+04,  2.56759831e+04,  3.21589874e+04,\n",
       "        9.38338561e+02,  1.03224230e+04,  1.25762445e+04,  1.16869203e+04,\n",
       "        2.51606030e+04,  1.57545311e+04,  1.13511064e+04,  1.23108825e+04,\n",
       "        6.72839306e+03,  9.72979521e+03,  2.96594087e+04,  3.91461862e+04,\n",
       "        1.16936897e+04,  3.71718509e+04,  4.23658136e+03,  9.56283584e+03,\n",
       "        3.42860029e+04,  2.88212970e+04,  8.77091669e+03,  4.91685700e+03,\n",
       "        1.22617045e+04,  3.03847971e+04,  9.71095184e+03,  1.15629735e+04,\n",
       "        7.89611333e+03,  9.07389065e+03,  7.96263628e+03,  6.91333969e+03,\n",
       "        3.54799980e+04,  3.32235010e+04,  7.74216037e+03,  1.52727331e+04,\n",
       "        4.02103001e+03,  8.86796962e+03,  6.42467484e+03,  3.14295355e+04,\n",
       "        3.29652236e+04,  2.02483410e+03,  9.23006738e+03,  6.69743601e+03,\n",
       "        1.41891044e+04,  3.72589923e+04,  1.03636481e+04,  1.06266446e+04,\n",
       "        1.03463596e+04,  2.63250675e+04,  3.98473453e+04,  8.11504355e+03,\n",
       "        4.20123030e+02,  9.18328674e+03,  1.54490447e+04,  9.69169927e+03,\n",
       "        3.51434975e+04,  7.40416142e+03,  1.71648356e+04,  9.25511108e+03,\n",
       "        8.44643817e+03,  3.06508183e+03,  3.24167342e+04,  3.14694525e+04,\n",
       "        3.96162959e+04,  5.55684299e+03,  9.47447184e+03,  3.60706421e+03,\n",
       "        7.75746319e+03,  8.25952865e+03,  3.17068124e+04,  2.99179622e+04,\n",
       "        2.97199589e+04,  8.93358663e+03,  3.24656828e+04,  3.38465489e+03,\n",
       "        3.69673261e+03,  1.12287910e+04,  1.32781734e+04,  1.24679630e+04,\n",
       "        5.51562934e+03,  1.57191659e+04,  1.50860705e+04,  2.50201849e+03,\n",
       "        2.81470049e+01,  1.05076114e+04,  7.03482361e+03,  3.16747784e+04,\n",
       "        1.20081681e+04,  2.36532961e+03,  6.46311240e+03,  7.97890579e+03,\n",
       "        4.45258542e+03,  2.14619997e+03,  1.15443143e+04,  1.26979157e+04,\n",
       "        6.87607717e+03,  1.64834788e+04,  1.19503928e+04,  1.42578209e+04,\n",
       "        2.78620364e+03,  6.92094441e+03,  2.30813630e+04,  7.24624702e+03,\n",
       "        5.07415453e+03,  5.18426686e+03,  6.80424555e+03,  4.80360790e+03,\n",
       "        1.01299425e+04,  5.37348591e+03,  5.91016859e+03,  6.77320214e+03,\n",
       "        3.32116271e+03,  5.66417802e+03,  3.76283619e+04,  1.01498787e+03,\n",
       "        1.27881673e+04,  9.08366466e+03,  1.38556794e+04,  5.41347696e+03,\n",
       "        4.83046767e+03,  3.59529138e+04,  3.90316060e+03,  2.17464447e+03,\n",
       "        1.53432277e+04,  1.23466925e+04,  3.45744560e+04,  4.88845442e+03,\n",
       "        5.86075302e+03,  3.11877620e+04,  6.17403585e+03,  2.24067425e+03,\n",
       "        8.06111902e+03,  9.68388708e+03,  8.06897572e+03,  5.84915471e+03,\n",
       "        1.28154407e+04,  3.84375437e+04,  1.39055457e+04,  2.89256730e+04,\n",
       "        6.84474019e+03,  3.54900372e+04,  3.37081560e+03,  1.19797565e+04,\n",
       "        9.17189066e+03,  6.20654396e+03,  1.14450001e+04,  1.42123190e+04,\n",
       "        5.29525804e+03,  4.54402696e+03,  8.07078451e+03,  1.44383921e+03,\n",
       "        7.51565317e+03,  4.04755010e+03,  1.31375339e+04,  3.93450541e+03,\n",
       "        1.03011846e+04,  6.90356340e+03,  9.47015435e+03,  1.96633257e+03,\n",
       "        1.34326929e+04,  1.69465304e+04,  1.51126769e+04,  1.08097776e+04,\n",
       "        5.47990430e+03,  2.27030588e+03,  1.93351606e+03,  1.30897335e+04,\n",
       "        1.41794761e+04,  4.65995426e+03,  3.87923406e+03,  9.66796930e+03,\n",
       "        9.63444224e+03,  2.76451241e+04,  7.25030524e+03,  1.01882433e+04,\n",
       "        6.47045813e+03,  2.97441405e+04,  1.13316903e+04,  7.12507517e+03,\n",
       "        1.03721799e+04,  1.23505421e+04,  2.59591581e+03,  1.09548042e+04,\n",
       "        1.10128524e+03,  6.66444877e+03,  2.83851854e+04,  3.88037265e+04,\n",
       "        6.51673212e+03,  8.21720981e+03,  2.06116173e+03, -2.58779036e+01,\n",
       "        1.07248869e+04,  4.19818350e+03,  5.08248610e+03,  2.44910902e+03,\n",
       "        7.02190713e+03,  3.34696237e+04,  3.77192315e+04,  1.49462065e+04,\n",
       "        8.35414917e+03,  1.57301558e+04,  3.28644515e+04,  9.16903018e+03,\n",
       "        3.36573742e+04,  3.35785869e+03,  3.02227780e+04,  8.35274359e+03,\n",
       "        1.38742130e+04,  4.21420665e+03,  3.21535219e+04,  7.99470010e+03,\n",
       "        1.13235240e+04,  9.27335526e+03,  4.28592523e+03,  1.29537793e+04,\n",
       "        1.18783568e+04,  8.54838814e+03,  1.29679436e+04,  2.37657560e+03,\n",
       "        1.02467370e+04,  5.67977274e+03,  1.10928245e+04,  3.11056309e+04,\n",
       "        9.89803230e+03,  7.94198159e+02,  5.86320676e+02,  3.94185122e+04,\n",
       "        9.34973829e+03,  7.24228383e+03,  1.41578768e+04,  1.31037898e+04,\n",
       "        2.73291355e+04,  7.38600581e+03,  7.09436299e+03,  1.23706269e+04,\n",
       "        2.96149600e+03,  3.71249627e+03,  2.45272168e+04,  2.59412141e+04,\n",
       "        1.31968622e+04,  2.84418332e+03,  4.93026526e+03,  9.60306674e+03,\n",
       "        1.21120545e+04,  2.30185299e+04,  3.08023987e+04,  1.03431900e+04,\n",
       "        2.39917317e+04,  2.96680408e+03,  1.14180546e+04,  7.39373906e+03,\n",
       "        7.89997497e+03,  9.45443123e+01,  7.40363957e+03,  3.56433184e+04,\n",
       "        5.82292200e+03,  5.91317355e+03,  3.17327573e+02,  1.07337238e+04,\n",
       "        6.58480918e+03,  9.79572686e+03,  3.91234224e+04,  2.76488781e+04,\n",
       "        1.11791387e+04,  3.53690729e+04,  1.47165682e+04,  6.97090574e+03,\n",
       "        1.08399845e+04,  7.14063698e+03,  3.67287454e+04,  5.85140078e+03,\n",
       "        1.07382898e+04,  1.02655327e+03,  2.40339952e+04,  2.02035748e+03,\n",
       "        3.45666390e+04,  1.12346180e+04,  1.94301336e+03,  3.17730916e+04,\n",
       "        6.91665000e+03,  5.49202224e+03,  3.77941977e+04,  2.48390279e+03,\n",
       "        9.25022446e+03,  2.79421777e+03,  1.30646817e+04,  1.26738672e+03,\n",
       "        1.09599650e+04,  6.89499509e+03,  3.61018725e+04,  7.44486528e+03,\n",
       "        3.06417687e+04,  2.93616891e+04,  6.91713838e+03,  1.04302726e+04,\n",
       "        2.04679577e+03,  2.48352207e+03,  3.93501579e+03,  1.28959039e+04,\n",
       "        3.69157016e+04,  1.00180985e+04,  6.28269042e+02,  1.10709837e+04,\n",
       "        5.21519582e+03,  1.00941925e+04,  5.25444960e+03,  7.12536652e+03,\n",
       "        4.12761855e+03,  2.85239067e+04,  3.99675673e+03, -1.13397098e+03,\n",
       "        3.30311969e+04,  1.27437339e+04,  3.60924058e+04,  1.01421003e+04,\n",
       "        7.84073872e+03,  4.60535141e+01,  2.71894961e+03,  1.18168795e+04,\n",
       "        5.96551334e+03,  2.97586195e+03,  1.17971631e+04,  8.00826944e+03,\n",
       "        7.22842933e+03,  5.11537660e+03,  3.20550030e+03,  3.21515039e+04,\n",
       "        3.69590115e+03,  8.88812161e+03,  4.63644277e+03,  1.27301798e+04,\n",
       "        1.50403229e+04,  7.48800528e+03,  2.67595280e+04,  1.41380007e+04,\n",
       "        1.72097782e+04,  1.17706055e+04])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cb7f6530",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "578      9724.53000\n",
       "610      8547.69130\n",
       "569     45702.02235\n",
       "1034    12950.07120\n",
       "198      9644.25250\n",
       "           ...     \n",
       "1261     3277.16100\n",
       "494     17942.10600\n",
       "97      10226.28420\n",
       "418     14418.28040\n",
       "920     13451.12200\n",
       "Name: charges, Length: 402, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2590c701",
   "metadata": {},
   "source": [
    "# accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "46590a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing linbrary for calculating accuracy\n",
    "from sklearn.metrics import mean_squared_error,r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e86d4cdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy=r2_score(y_test,predicted_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "66e44d78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7907514220754801"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ac80c015",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=mean_squared_error(y_test,predicted_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d72da505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33368758.796567176"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "285d8794",
   "metadata": {},
   "source": [
    "#  Decision tree\n",
    "A decision tree is a non-parametric supervised learning algorithm for classification and regression tasks. It has a hierarchical tree structure consisting of a root node, branches, internal nodes, and leaf nodes. Decision trees are used for classification and regression tasks, providing easy-to-understand models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "47c98f3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>30.970</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>31.920</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>36.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>25.800</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>29.070</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex     bmi  children  smoker  region\n",
       "0      19    1  27.900         0       0       1\n",
       "1      18    0  33.770         1       1       0\n",
       "2      28    0  33.000         3       1       0\n",
       "3      33    0  22.705         0       1       3\n",
       "4      32    0  28.880         0       1       3\n",
       "...   ...  ...     ...       ...     ...     ...\n",
       "1333   50    0  30.970         3       1       3\n",
       "1334   18    1  31.920         0       1       2\n",
       "1335   18    1  36.850         0       1       0\n",
       "1336   21    1  25.800         0       1       1\n",
       "1337   61    1  29.070         0       0       3\n",
       "\n",
       "[1338 rows x 6 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8854bed1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       16884.92400\n",
       "1        1725.55230\n",
       "2        4449.46200\n",
       "3       21984.47061\n",
       "4        3866.85520\n",
       "           ...     \n",
       "1333    10600.54830\n",
       "1334     2205.98080\n",
       "1335     1629.83350\n",
       "1336     2007.94500\n",
       "1337    29141.36030\n",
       "Name: charges, Length: 1338, dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6e38769e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the library  decisiontreeregressor\n",
    "from sklearn.tree  import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d46f6d2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dc=DecisionTreeRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5a679e7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dc.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9e95bbc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "prd1=dc.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "53e74835",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9748.9106  ,  8823.279   , 44202.6536  , 12741.16745 ,\n",
       "        9264.797   , 21984.47061 ,  2196.4732  , 10381.4787  ,\n",
       "        8965.79575 ,  5693.4305  ,  6933.24225 , 30284.64294 ,\n",
       "        6849.026   ,  3704.3545  , 35147.52848 , 10560.4917  ,\n",
       "       12124.9924  ,  2897.3235  ,  6455.86265 , 33907.548   ,\n",
       "       24869.8368  , 12495.29085 , 10564.8845  , 24915.22085 ,\n",
       "        1391.5287  ,  4454.40265 , 23288.9284  ,  7954.517   ,\n",
       "        3757.8448  ,  9411.005   ,  8538.28845 , 48673.5588  ,\n",
       "       13887.204   , 10713.644   , 15817.9857  ,  4357.04365 ,\n",
       "        8944.1151  , 37484.4493  , 39983.42595 ,  2020.177   ,\n",
       "       21984.47061 ,  2866.091   , 22331.5668  , 43813.8661  ,\n",
       "       36307.7983  ,  3579.8287  , 26140.3603  ,  6358.77645 ,\n",
       "        4719.52405 , 27117.99378 ,  2855.43755 ,  4296.2712  ,\n",
       "       24915.22085 , 60021.39897 , 11856.4115  , 19673.33573 ,\n",
       "        3392.9768  ,  7518.02535 ,  7726.854   , 12913.9924  ,\n",
       "        1252.407   , 46130.5265  , 12928.7911  ,  8703.456   ,\n",
       "       10141.1362  ,  9877.6077  , 33907.548   , 55135.40209 ,\n",
       "        2913.569   ,  8538.28845 , 13129.60345 , 10965.446   ,\n",
       "       16297.846   , 13887.204   , 13204.28565 , 13204.28565 ,\n",
       "        6250.435   ,  6849.026   , 20773.62775 , 46599.1084  ,\n",
       "       11658.11505 , 46113.511   ,  1639.5631  ,  8825.086   ,\n",
       "       40941.2854  , 19719.6947  ,  2904.088   ,  3292.52985 ,\n",
       "       27000.98473 , 36950.2567  ,  6128.79745 , 10436.096   ,\n",
       "        2632.992   ,  8516.829   ,  6112.35295 ,  4527.18295 ,\n",
       "       41999.52    , 62592.87309 ,  5031.26955 , 11090.7178  ,\n",
       "        1826.843   ,  6112.35295 ,  3577.999   , 39047.285   ,\n",
       "       37829.7242  , 23288.9284  , 12029.2867  , 19673.33573 ,\n",
       "       11362.755   , 45008.9555  , 12479.70895 ,  4686.3887  ,\n",
       "        8988.15875 , 34617.84065 , 47269.854   ,  7256.7231  ,\n",
       "        1832.094   ,  8442.667   , 36910.60803 , 11015.1747  ,\n",
       "       40941.2854  , 10355.641   , 13822.803   ,  5693.4305  ,\n",
       "        7624.63    ,  5209.57885 , 38245.59327 , 35069.37452 ,\n",
       "       48673.5588  ,  1646.4297  ,  6849.026   ,  1727.54    ,\n",
       "        5974.3847  ,  8688.85885 , 62592.87309 , 37079.372   ,\n",
       "       21259.37795 , 10156.7832  , 21677.28345 , 12609.88702 ,\n",
       "        2459.7201  , 10601.63225 ,  8978.1851  , 10796.35025 ,\n",
       "        5266.3656  , 13831.1152  , 36910.60803 , 22395.74424 ,\n",
       "        1628.4709  , 10942.13205 ,  7153.5539  , 38126.2465  ,\n",
       "        8835.26495 , 21344.8467  ,  2217.46915 ,  6238.298   ,\n",
       "        1639.5631  ,  1711.0268  , 10600.5483  ,  9620.3307  ,\n",
       "        4922.9159  , 13470.8044  , 13204.28565 ,  9048.0273  ,\n",
       "        4134.08245 , 24671.66334 , 20167.33603 ,  5693.4305  ,\n",
       "        4237.12655 ,  1634.5734  , 19442.3535  ,  4133.64165 ,\n",
       "       32108.66282 ,  2438.0552  ,  4449.462   , 24671.66334 ,\n",
       "        4719.73655 ,  5855.9025  , 27218.43725 ,  1705.6245  ,\n",
       "       11289.10925 ,  7281.5056  , 11945.1327  ,  2497.0383  ,\n",
       "        7228.21565 , 26109.32905 ,  1639.5631  ,  2331.519   ,\n",
       "       14410.9321  , 10043.249   , 41919.097   ,  3877.30425 ,\n",
       "        4934.705   , 23887.6627  ,  3021.80915 ,  1815.8759  ,\n",
       "        6203.90175 , 12404.8791  ,  3471.4096  ,  4454.40265 ,\n",
       "       10923.9332  , 47055.5321  , 12495.29085 , 19040.876   ,\n",
       "        4922.9159  , 41676.0811  ,  3309.7926  ,  9487.6442  ,\n",
       "        4889.9995  ,  1146.7966  ,  8835.26495 , 13555.0049  ,\n",
       "        4133.64165 ,  2473.3341  ,  6289.7549  ,  1815.8759  ,\n",
       "        6748.5912  ,  5116.5004  , 14001.1338  ,  6933.24225 ,\n",
       "        5934.3798  ,  8965.79575 , 21232.18226 ,  3176.8159  ,\n",
       "       12231.6136  , 14410.9321  , 12629.1656  , 11931.12525 ,\n",
       "        6338.0756  ,  2302.3     , 21344.8467  ,  8083.9198  ,\n",
       "       21797.0004  , 24671.66334 ,  4931.647   ,  6600.361   ,\n",
       "       28340.18885 , 34617.84065 ,  6393.60345 , 12096.6512  ,\n",
       "        5649.715   , 44585.45587 ,  7162.0122  ,  7419.4779  ,\n",
       "       32108.66282 , 10072.05505 ,  2639.0429  ,  7731.85785 ,\n",
       "        1515.3449  ,  6123.5688  , 19107.7796  , 47291.055   ,\n",
       "        3877.30425 ,  3227.1211  ,  2200.83085 ,  1704.70015 ,\n",
       "        8062.764   ,  7882.429475, 24671.66334 ,  3847.674   ,\n",
       "        8891.1395  , 24393.6224  , 47055.5321  , 16455.70785 ,\n",
       "        6393.60345 , 10982.5013  , 37484.4493  , 11015.1747  ,\n",
       "       39047.285   ,  1137.011   , 37484.4493  ,  5253.524   ,\n",
       "       11842.442   ,  3594.17085 , 39836.519   ,  6112.35295 ,\n",
       "        9487.6442  , 10096.97    ,  1639.5631  , 27000.98473 ,\n",
       "       12224.35085 ,  5630.45785 , 13143.33665 , 21344.8467  ,\n",
       "        6600.20595 ,  4234.927   ,  7418.522   , 21259.37795 ,\n",
       "        3392.9768  ,  1705.6245  ,  3077.0955  , 47896.79135 ,\n",
       "        7518.02535 ,  4527.18295 , 12495.29085 , 10923.9332  ,\n",
       "       34838.873   ,  6238.298   ,  5240.765   ,  9386.1613  ,\n",
       "        1639.5631  ,  3056.3881  , 32734.1863  , 17663.1442  ,\n",
       "       13352.0998  ,  2302.3     ,  3227.1211  ,  9101.798   ,\n",
       "       10072.05505 , 13747.87235 , 20009.63365 , 18963.17192 ,\n",
       "       15359.1045  ,  2459.7201  ,  5400.9805  ,  4399.731   ,\n",
       "        7419.4779  ,  2304.0022  ,  7518.02535 , 44202.6536  ,\n",
       "        3393.35635 ,  3956.07145 ,  2196.4732  ,  8280.6227  ,\n",
       "        3353.284   , 27117.99378 , 47291.055   , 18765.87545 ,\n",
       "        9288.0267  , 41949.2441  , 29186.48236 ,  4922.9159  ,\n",
       "        8703.456   ,  4234.927   , 27533.9129  ,  4350.5144  ,\n",
       "       12957.118   ,  1832.094   , 15359.1045  ,  3176.8159  ,\n",
       "       24667.419   ,  5400.9805  ,  2842.76075 , 44501.3982  ,\n",
       "        4949.7587  ,  4889.0368  , 27533.9129  , 16586.49771 ,\n",
       "       32108.66282 ,  2221.56445 , 10560.4917  ,  3484.331   ,\n",
       "        4536.259   ,  4949.7587  , 44641.1974  ,  6250.435   ,\n",
       "       62592.87309 , 37484.4493  ,  5488.262   ,  8538.28845 ,\n",
       "        1632.56445 ,  3161.454   ,  3579.8287  ,  8125.7845  ,\n",
       "       44641.1974  , 11931.12525 ,  1731.677   , 12124.9924  ,\n",
       "        2134.9015  , 17929.30337 ,  4337.7352  ,  2438.0552  ,\n",
       "        3392.3652  , 36307.7983  ,  6933.24225 ,  1615.7667  ,\n",
       "       39774.2763  ,  9850.432   , 41661.602   , 11931.12525 ,\n",
       "        4454.40265 ,  2775.19215 ,  1875.344   ,  9872.701   ,\n",
       "        5003.853   ,  2203.73595 , 10564.8845  ,  7640.3092  ,\n",
       "        5966.8874  ,  3877.30425 , 12609.88702 , 37484.4493  ,\n",
       "        1639.5631  ,  8442.667   ,  7882.429475, 28476.73499 ,\n",
       "       11090.7178  ,  3766.8838  , 18223.4512  , 10713.644   ,\n",
       "       16085.1275  , 13129.60345 ])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prd1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "8813abec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "578      9724.53000\n",
       "610      8547.69130\n",
       "569     45702.02235\n",
       "1034    12950.07120\n",
       "198      9644.25250\n",
       "           ...     \n",
       "1261     3277.16100\n",
       "494     17942.10600\n",
       "97      10226.28420\n",
       "418     14418.28040\n",
       "920     13451.12200\n",
       "Name: charges, Length: 402, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "08ee9a52",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy1=r2_score(y_test,prd1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2344f654",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6820220978628406"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1cd131ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean1=mean_squared_error(y_test,prd1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d01cf5b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50707765.97048483"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b287abf",
   "metadata": {},
   "source": [
    "# random forest\n",
    "Random Forest is a popular machine learning algorithm that belongs to the supervised learning technique. It can be used for both Classification and Regression problems in ML. It is based on the concept of ensemble learning, which is a process of combining multiple classifiers to solve a complex problem and to improve the performance of the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eca570c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>30.970</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>31.920</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>36.850</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>25.800</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>29.070</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex     bmi  children  smoker  region\n",
       "0      19    1  27.900         0       0       1\n",
       "1      18    0  33.770         1       1       0\n",
       "2      28    0  33.000         3       1       0\n",
       "3      33    0  22.705         0       1       3\n",
       "4      32    0  28.880         0       1       3\n",
       "...   ...  ...     ...       ...     ...     ...\n",
       "1333   50    0  30.970         3       1       3\n",
       "1334   18    1  31.920         0       1       2\n",
       "1335   18    1  36.850         0       1       0\n",
       "1336   21    1  25.800         0       1       1\n",
       "1337   61    1  29.070         0       0       3\n",
       "\n",
       "[1338 rows x 6 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f1359b5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       16884.92400\n",
       "1        1725.55230\n",
       "2        4449.46200\n",
       "3       21984.47061\n",
       "4        3866.85520\n",
       "           ...     \n",
       "1333    10600.54830\n",
       "1334     2205.98080\n",
       "1335     1629.83350\n",
       "1336     2007.94500\n",
       "1337    29141.36030\n",
       "Name: charges, Length: 1338, dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "eed79f55",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the library\n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "cd31c37f",
   "metadata": {},
   "outputs": [],
   "source": [
    "rd=RandomForestRegressor(n_estimators=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "bb7f23b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=40)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=40)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(n_estimators=40)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rd.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "53fab0fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "prd2=rd.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "91c9e71a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10183.828391  ,  9470.39508175, 46247.8359685 , 13733.8727425 ,\n",
       "       10581.619929  , 13255.47013875,  2129.99553125, 12674.95267675,\n",
       "        6938.30063375,  6701.31118125,  7470.95284875, 19437.91113925,\n",
       "        9175.8537375 ,  5802.4593    , 24430.117448  , 13379.7942685 ,\n",
       "       14209.0549435 ,  5622.6444235 ,  6383.39591875, 34029.73021375,\n",
       "       23910.71124125, 15804.049888  , 10486.196311  , 28879.0372435 ,\n",
       "        2118.164127  ,  7331.53611575,  6841.77443425,  8504.99962175,\n",
       "        4161.0353935 , 12269.056502  ,  8464.202883  , 48080.6272175 ,\n",
       "       14753.74487025, 11771.09457075, 16729.23285025,  4275.57906925,\n",
       "        8586.74021   , 37805.3862445 , 41317.055444  ,  3783.74527525,\n",
       "        9745.19408325,  3916.568957  , 20978.3831095 , 47874.23544975,\n",
       "       36609.16873125,  3629.872704  , 13379.7713335 ,  6676.85719125,\n",
       "        5408.266341  , 15199.417715  ,  4631.43002575,  4177.65648675,\n",
       "       26920.801955  , 46107.2788455 , 11621.953665  ,  9594.55809375,\n",
       "        6079.962574  , 11526.48525275, 10242.917048  , 15974.17246475,\n",
       "        1425.01017375, 46387.2255435 , 16344.07517175, 16644.301723  ,\n",
       "       14658.92094725,  9663.66978375, 34114.94345125, 42184.63278275,\n",
       "        4580.65533425, 12815.88071725, 15143.14097   , 11941.945731  ,\n",
       "       17117.8107605 , 14233.8340115 , 14095.996232  , 15355.887749  ,\n",
       "       11360.692923  , 10914.48469775, 19839.51461125, 46545.75954125,\n",
       "       11611.9759625 , 52074.511337  ,  3341.6490105 ,  9133.980281  ,\n",
       "       40755.36103   , 19093.3816375 ,  3805.9661075 ,  3567.54955475,\n",
       "       15192.530785  , 40212.62722825,  8533.521775  , 12783.022278  ,\n",
       "        2945.807405  , 10099.17251775, 10590.5573605 ,  4537.91823875,\n",
       "       43246.265393  , 50740.135964  ,  7091.96740325, 11031.72201625,\n",
       "        4301.17200325,  8472.5215325 ,  7018.46973325, 38744.66537225,\n",
       "       25499.923428  ,  4843.82753275, 11404.746135  ,  8903.69079675,\n",
       "       12412.5329545 , 45508.85608425, 12312.08520875,  8147.0982095 ,\n",
       "        9773.3428175 , 34333.1945    , 48390.6339165 ,  7196.47890875,\n",
       "        2029.87854125, 12373.23461775, 22305.939686  , 11555.88033075,\n",
       "       41667.19279975, 14156.4855265 , 14033.66423   , 10867.9893855 ,\n",
       "        9970.540056  ,  5567.2246575 , 26284.627294  , 26251.64258825,\n",
       "       48282.93427125,  1745.03539875, 10963.043946  ,  3249.77181375,\n",
       "        5924.82969625, 10409.02456775, 40371.0934795 , 37273.78928375,\n",
       "       25317.5957925 , 15104.0436465 , 23919.0315385 ,  6019.866117  ,\n",
       "        2300.54553625, 12704.8605825 ,  9251.6963    , 10627.88894175,\n",
       "        6847.29294925, 14219.272204  , 22185.95181825, 10078.83459025,\n",
       "        1643.34538625, 10775.3188875 ,  6455.038476  , 38967.3667125 ,\n",
       "       11096.20777275,  4274.63945375,  3256.7415625 ,  7196.74994825,\n",
       "        3482.41390975,  3305.20021625, 14286.03916775, 10281.3935155 ,\n",
       "        8511.03911175, 13251.39593625, 14146.25828575,  9277.303835  ,\n",
       "        5727.06349025, 10722.77325775, 17679.79399   ,  6994.741622  ,\n",
       "        4605.64863925,  2323.42456125, 11068.45380375,  7241.62587625,\n",
       "       13157.83350275,  2466.3142945 ,  7097.91869875,  7034.53847325,\n",
       "        5848.14425975,  7773.68661075, 26312.20797875,  1770.50452   ,\n",
       "       17479.92482775,  6753.8133825 , 11587.736315  ,  5590.32770075,\n",
       "        9767.2276505 , 28019.40573625,  2344.33078525,  2954.7023135 ,\n",
       "       14129.07545   , 11863.494694  , 41705.29786   ,  4526.8625865 ,\n",
       "        5800.328388  , 25085.44719425,  2976.1017145 ,  3954.00173825,\n",
       "        8010.41813375,  9142.4314765 ,  7694.4297875 ,  4339.98557   ,\n",
       "       12823.159471  , 46937.22559475, 16245.46292525, 18776.63911375,\n",
       "       12331.31312975, 43768.5767055 ,  9074.5426405 , 10817.48959025,\n",
       "        6604.139036  ,  1261.6643675 , 10360.049628  , 13592.3959525 ,\n",
       "        7765.9893155 ,  5779.494576  ,  6497.39563   ,  7807.73253075,\n",
       "        6588.43182125,  6700.43443775, 14338.991557  ,  7058.519916  ,\n",
       "        8959.77024975,  7917.05470125, 14443.67597925,  6287.1526815 ,\n",
       "       12458.58538225, 15062.50293125, 16829.04916875, 11766.37772125,\n",
       "        7920.16291075,  3433.7000365 ,  8709.86594025,  9160.53408575,\n",
       "       15554.30640875,  6513.981987  ,  5340.92235325,  7005.8633775 ,\n",
       "       11543.93525425, 34384.46419   ,  6023.09487125, 12160.1076275 ,\n",
       "        5611.9703325 , 38361.62038575,  7210.36974625,  9493.1194415 ,\n",
       "       11759.03021775, 10738.73715675,  4588.56592925, 10702.8171415 ,\n",
       "        3531.00662575,  6727.84586725, 19135.671615  , 46386.306065  ,\n",
       "        4125.92997825,  4211.323225  ,  5956.21291   ,  1702.7214975 ,\n",
       "        7642.2812525 ,  5447.31393458,  9526.91314075,  7259.010831  ,\n",
       "        9199.03413225, 25919.30021625, 46087.91835675, 15743.54871275,\n",
       "        6554.58759875, 11523.5638125 , 43562.52176625, 10921.742395  ,\n",
       "       39545.10316   ,  1915.55706375, 39673.7658395 ,  4945.891775  ,\n",
       "       12271.0387725 ,  6280.03244725, 39966.034922  ,  6714.81530425,\n",
       "       10428.934985  , 11103.34800575,  2999.462062  , 16623.639016  ,\n",
       "       13104.90961225, 10705.261975  , 15819.31948425, 13210.751435  ,\n",
       "        8550.6476905 ,  3722.16144125, 11999.387687  , 22322.5024035 ,\n",
       "        5062.51681625,  1749.24251   ,  3171.017937  , 46632.21726375,\n",
       "       10193.1219005 ,  6233.51627825, 15824.38619   , 13042.228735  ,\n",
       "       34268.8407345 ,  6822.93206225,  5655.805199  ,  8938.653653  ,\n",
       "        2669.240866  ,  6344.697693  , 22243.61300625, 17239.063865  ,\n",
       "       14564.042034  ,  2722.35367   ,  3337.74061175,  9460.61326325,\n",
       "        9629.44263875, 14404.56656875, 19998.83651625,  7161.8654595 ,\n",
       "       16060.225809  ,  2303.0210625 ,  9232.1760665 , 10315.73384425,\n",
       "       15674.4845295 ,  2334.04945625,  9495.48042025, 48320.19638225,\n",
       "        4552.1015895 ,  8523.187548  ,  2183.2499625 , 11604.408757  ,\n",
       "        3577.72284375, 15518.094262  , 46605.9106005 , 17700.7490775 ,\n",
       "        9565.1004885 , 44608.98578075, 17461.09428475, 12331.31312975,\n",
       "       10224.41867425,  4432.2867075 , 28123.753445  ,  4647.02725525,\n",
       "       13577.141869  ,  2464.665236  , 17317.201125  ,  3032.95585125,\n",
       "       24276.82526375,  8584.54674175,  4224.92908675, 43289.1981025 ,\n",
       "        7252.83956725,  4907.67863   , 29434.77642975,  2828.97551125,\n",
       "       12948.77985125,  4280.98992275, 11198.4273605 ,  3869.78031475,\n",
       "        8047.332595  ,  5649.3226945 , 46583.6807215 , 11566.54986275,\n",
       "       47072.15638225, 37882.51204625,  5723.21083625, 12018.8353025 ,\n",
       "        1758.73405625,  4432.86142675,  3072.05204875, 11604.214012  ,\n",
       "       46503.7834145 , 11505.601365  ,  1803.51753875, 14480.08961175,\n",
       "        2277.5244625 , 12657.29131475,  7725.001292  ,  2243.8596225 ,\n",
       "        4022.640804  , 38241.6865295 ,  7020.49189225,  2838.90299575,\n",
       "       41699.80816625, 15935.28916025, 42991.413556  , 11658.26853875,\n",
       "        8874.7236825 ,  4180.789708  ,  2275.7065825 , 16121.603632  ,\n",
       "        5884.4120775 ,  2060.93017125, 12225.56326225,  7065.9094625 ,\n",
       "        6472.24236125,  7035.70639   ,  6027.22052075, 44057.697417  ,\n",
       "        3419.82518525, 11725.06668   ,  8031.22062346, 17116.40068575,\n",
       "       11031.72201625,  5880.158116  , 17719.43252975, 14566.15777875,\n",
       "       19241.734584  , 15429.28411725])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prd2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "adf02333",
   "metadata": {},
   "outputs": [],
   "source": [
    "#finding the accuracy\n",
    "accuracy2=r2_score(y_test,prd2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "1b2db087",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8689290075189091"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "03d24907",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean2=mean_squared_error(y_test,prd2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a15dab3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20901821.062343683"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7d206f9",
   "metadata": {},
   "source": [
    "# KNeighborsRegressor\n",
    "Regression based on k-nearest neighbors. The target is predicted by local interpolation of the targets associated of the nearest neighbors in the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3af2cf1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ae0bdde3",
   "metadata": {},
   "outputs": [],
   "source": [
    "bk=None\n",
    "ba=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "12ad4e58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.5472325986664505\n",
      "-0.16638709049150555\n",
      "-0.041589234007097506\n",
      "-0.028493924562641236\n",
      "-0.006840662338950132\n",
      "0.01353983131494827\n",
      "0.031118319183324018\n",
      "0.045368590454668234\n",
      "0.05775755550968083\n",
      "0.06712195302416804\n"
     ]
    }
   ],
   "source": [
    "for k in range(1, 11):\n",
    "    knn = KNeighborsRegressor(n_neighbors=k)\n",
    "    sc = cross_val_score(knn, x_train, y_train, cv=5 , scoring = \"r2\")\n",
    "    m_a = np.mean(sc)\n",
    "    print(m_a)\n",
    "\n",
    "    if m_a > ba:\n",
    "        ba = m_a\n",
    "        bk = k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "48e29620",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 0.06712195302416804)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bk,ba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "55e7db5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsRegressor(n_neighbors=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2f83dab9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsRegressor(n_neighbors=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_neighbors=10)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsRegressor(n_neighbors=10)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "4cfa548a",
   "metadata": {},
   "outputs": [],
   "source": [
    "prd3 = knn.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2811950a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([13172.67557 ,  9760.515626, 16573.167645, 16435.169226,\n",
       "       10507.256175, 10395.375061,  4815.93341 , 26689.594623,\n",
       "        8387.867345,  9139.71922 , 11139.2357  , 17818.515975,\n",
       "       16228.500252, 10527.352431,  6400.30492 , 14401.047444,\n",
       "       13945.16276 , 14103.770589,  8057.86647 ,  9788.26699 ,\n",
       "       18068.071259, 14876.252315, 13296.205802, 14400.032858,\n",
       "        5312.75758 , 22807.098432, 11569.9066  ,  8688.484413,\n",
       "        6674.15002 , 20553.487752,  9387.932313, 15629.706725,\n",
       "       22121.242926, 14298.948235,  6268.928894,  5568.245646,\n",
       "       22599.882601, 22604.726949, 10535.462985,  7094.466133,\n",
       "        9323.142675,  8300.920068, 10876.11932 , 18421.677405,\n",
       "        9709.71656 , 12723.071053, 15960.838714, 12980.622125,\n",
       "        9396.49315 , 11873.52855 ,  8886.02571 ,  9498.580369,\n",
       "       13439.128073, 21662.153726, 15384.312685, 20719.716075,\n",
       "        9783.39765 , 17860.74538 , 13985.559217, 14200.372945,\n",
       "        6285.72237 , 22530.24421 , 24207.692345, 14903.589524,\n",
       "       14530.387959, 15740.864189,  4752.143231, 22846.310561,\n",
       "        5607.468823, 11523.373068, 19400.275351, 17176.954122,\n",
       "        7907.465555, 29247.263341, 14072.40871 , 15819.485596,\n",
       "       13803.367934, 19007.218701,  8775.45026 , 24208.628044,\n",
       "       12865.63072 , 19000.310175,  8814.392075, 20174.954778,\n",
       "       10198.601951, 11311.171464, 10678.43094 ,  4419.880024,\n",
       "       14106.513131, 23840.29595 , 24058.115148, 15342.829011,\n",
       "        6191.90334 ,  9863.225247, 21797.780271, 11028.398175,\n",
       "       15161.644131, 22413.740346,  9356.699415, 11127.021935,\n",
       "       10192.402571, 19038.64023 , 13073.27308 , 17804.28035 ,\n",
       "       16792.6435  , 10562.301725, 13286.522295, 14105.77309 ,\n",
       "       12016.319285, 16053.165045, 15121.60605 ,  5388.341687,\n",
       "       10787.334065, 16059.561971, 14927.990605, 14695.826617,\n",
       "        5069.313208, 12586.940016, 16769.529575, 12141.218545,\n",
       "       13184.240259, 12551.429465, 17655.16109 , 18729.360837,\n",
       "       14443.17249 ,  9204.481575, 16820.863892, 13686.534002,\n",
       "       17324.087565,  5215.879235, 10577.674802,  7946.689698,\n",
       "        7209.916855, 12279.038275, 13092.55398 ,  8832.534897,\n",
       "       12541.194862, 16891.476383, 17329.923708,  9501.898685,\n",
       "       11863.181763, 12714.361635, 15840.36298 , 13554.540863,\n",
       "        6539.44932 , 29425.421841, 19195.969678,  6085.960174,\n",
       "        2901.75776 , 13443.478017,  9456.195385, 12325.873187,\n",
       "       16610.83946 ,  7155.879685,  6983.681555,  9586.248495,\n",
       "        8918.186735,  4222.383359, 13501.117714, 12163.471392,\n",
       "       14775.159399, 20644.28165 , 14327.62324 , 17120.6524  ,\n",
       "       12614.018681, 16623.698445,  5997.188033,  8095.571045,\n",
       "        5742.259255,  7557.153765, 13042.889302,  5542.451888,\n",
       "       19544.707862,  9026.8337  , 13301.775103, 16576.94337 ,\n",
       "        9871.103385,  7744.210849, 18339.28782 ,  6240.939795,\n",
       "       13797.99287 ,  6370.567725, 14880.95477 , 19457.36277 ,\n",
       "       11385.037246, 21509.513025, 10076.279146,  3520.80004 ,\n",
       "       13853.726605, 14571.931739, 17104.691874, 12448.836164,\n",
       "        8803.558729, 14497.981112,  7795.094048,  5170.193684,\n",
       "        7308.35355 , 17354.520926, 13141.202929,  7652.043861,\n",
       "       12568.786951, 18611.441378, 16541.575331,  8967.89522 ,\n",
       "       10037.696241, 23630.933989,  7646.377996, 11095.592057,\n",
       "       17472.102096, 10399.87655 , 15263.570697, 13542.65135 ,\n",
       "        7963.424888,  8931.585415,  9778.235885,  8217.588113,\n",
       "        9448.166425,  7871.184156, 12921.3825  , 10583.357035,\n",
       "       11870.990668, 10006.233285, 11658.770136,  6436.510404,\n",
       "       15271.418835, 22888.614636, 15796.069316, 12223.48579 ,\n",
       "       10659.362935,  8139.032096,  3758.835225, 11569.325115,\n",
       "       22817.978768,  8149.347135, 10351.009391, 13775.53726 ,\n",
       "       14055.097406, 13584.187945, 12358.012545, 15267.86964 ,\n",
       "       13391.42183 , 12118.88763 , 10283.776585, 11458.642085,\n",
       "       23047.864557, 13489.906382,  5782.537974,  9082.048964,\n",
       "        3585.10645 , 10547.561679,  8438.81262 , 18923.709178,\n",
       "        9792.11042 , 10433.29755 ,  9560.922689,  4374.578925,\n",
       "       11499.83289 ,  9709.71656 ,  8671.974521,  8940.143269,\n",
       "       11841.864955, 14139.806151, 13521.827855, 17654.25253 ,\n",
       "       11289.752185, 12442.539545, 14658.38866 , 12089.677512,\n",
       "       21349.348163,  9001.434495,  9444.53345 , 18898.61877 ,\n",
       "       12433.33581 ,  5880.708299, 20438.062423, 16575.980817,\n",
       "       14422.540677, 10431.310855, 10998.989176, 15986.217436,\n",
       "       12035.131705, 21081.233949, 15912.088931,  8610.46597 ,\n",
       "       24236.736473, 19654.45135 , 15360.364423, 14657.05596 ,\n",
       "       18722.955815,  4948.65222 ,  2985.585395, 23551.960409,\n",
       "       17745.269455,  9213.555155, 16496.719511, 12877.920291,\n",
       "       18241.980651,  9795.72113 ,  9625.67618 , 10840.464649,\n",
       "       11867.787605, 10148.262701,  6008.851625,  6763.261865,\n",
       "       16201.998988,  6914.938129, 15890.86891 ,  9929.025995,\n",
       "        9977.879885,  4662.511548,  9975.1147  , 13649.243946,\n",
       "        6393.957948, 11907.370195, 12045.223709, 13347.845307,\n",
       "       15868.224389,  2944.674145, 13157.198455, 15773.747888,\n",
       "        9354.73606 , 12829.692142,  5028.609948, 16368.868373,\n",
       "       17539.634957, 13276.62595 , 20849.911325, 10954.96026 ,\n",
       "       17097.400224, 16178.284188, 14773.161808, 10124.554574,\n",
       "       12254.709975,  9711.15415 , 18005.550481,  7294.18362 ,\n",
       "       15982.967811,  3500.776505,  5307.040253,  6496.76074 ,\n",
       "       19558.027251, 15439.724319,  6016.614544, 13621.493   ,\n",
       "        7394.776391,  8071.289725, 23606.168159,  3813.288945,\n",
       "       13799.443017,  9030.577129, 11619.384004,  7033.322145,\n",
       "       11076.685989,  4326.41089 , 12412.794241, 15953.905579,\n",
       "       12819.27967 , 12627.52359 , 10243.95978 , 14002.40545 ,\n",
       "        9099.258024,  5395.512925, 10480.706375, 17409.670764,\n",
       "       16948.858723, 12928.86408 ,  3350.62862 , 13694.03184 ,\n",
       "        5469.239915, 13633.26477 ,  8652.136984,  9586.20324 ,\n",
       "       10664.51987 ,  9742.23469 , 10583.357035,  4575.884658,\n",
       "       24312.431043, 19938.021628, 18266.575424, 13548.139615,\n",
       "       19662.070221,  2873.57443 , 11399.79448 , 14584.544729,\n",
       "       10240.228894, 12770.917846, 13388.549047,  7670.596288,\n",
       "       17555.688872, 10110.102918, 11187.352692, 18740.245867,\n",
       "        8455.122855, 15763.276334,  7556.803005, 16722.656974,\n",
       "       11234.562005, 19247.452619,  9136.733089, 11144.56726 ,\n",
       "       21272.3883  , 17450.760356])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prd3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "a538774b",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy4=r2_score(y_test,prd3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2dcfa97c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.17130386116664542"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4a2256f",
   "metadata": {},
   "source": [
    "# Extra Tree Regressor\n",
    "\n",
    "This class implements a meta estimator that fits a number of randomized decision trees  on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a28ee847",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import  ExtraTreesRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "183432c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "et=ExtraTreesRegressor(n_estimators = 120)\n",
    "et.fit(x_train,y_train)\n",
    "prd4=et.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "ed734801",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10146.89448142,  9642.47203883, 46059.64761025, 13230.08436917,\n",
       "        9977.38047317, 13045.7984935 ,  2184.56998917, 11803.67070375,\n",
       "        7296.2568525 ,  8739.14021308,  6630.50042125, 21896.551625  ,\n",
       "        7843.81175117,  4811.22896342, 26175.55729217, 13857.40778283,\n",
       "       18572.82618542,  8295.56826358,  6428.42727083, 30774.47459742,\n",
       "       23789.77978   , 19533.15851392, 10660.1615845 , 26770.905031  ,\n",
       "        2520.52922992, 10882.01656483,  5197.19840083,  8433.933985  ,\n",
       "        3925.9551345 , 12803.47841533,  9309.45576833, 48615.16807475,\n",
       "       13249.30396167, 12748.32195142, 16589.50186142,  4053.12989917,\n",
       "        8737.73399183, 38625.43884192, 40175.71884408,  2028.45572917,\n",
       "        5484.02065008,  3069.48316925, 24100.08916633, 47691.616608  ,\n",
       "       36836.31366425,  3537.16506375, 13973.76643592,  6771.72871242,\n",
       "        4700.00933   , 12580.04949058,  5684.48209542,  3764.3399195 ,\n",
       "       26351.89596758, 47781.41419075, 11806.3949175 , 10250.27382642,\n",
       "        2349.4783875 , 14432.065085  , 12479.85629142, 15418.539404  ,\n",
       "        4978.901673  , 44524.25985333, 21250.75229225, 16284.37346067,\n",
       "       12238.41294858,  9987.32253742, 28621.58925625, 41903.47222217,\n",
       "        3897.39734417, 10682.99259   , 16651.17412133, 11897.88721392,\n",
       "       16944.64344058, 13878.00510708, 13697.94152492, 16876.61298892,\n",
       "       17731.81979142, 13402.05471692, 20169.384536  , 47461.49800833,\n",
       "       11661.15938333, 52071.05340783,  2381.25711133, 11362.12950508,\n",
       "       41292.71670725, 19614.47179467,  3666.56858942,  2911.576159  ,\n",
       "       13112.70001125, 36887.59346825, 11035.50812433, 12735.04705467,\n",
       "        3332.784453  ,  9013.15467875, 12059.434716  ,  6957.58108217,\n",
       "       41489.98907875, 39094.04957692,  5543.01456042, 10905.0944725 ,\n",
       "        2587.63492683,  6269.127327  ,  5753.12933942, 38558.02500808,\n",
       "       25259.00066817,  3453.26244458, 10901.9625    ,  6563.0763415 ,\n",
       "       11824.75688125, 45242.85420417, 12431.6615375 , 10737.2571455 ,\n",
       "        9682.68434242, 34199.63947833, 48437.76147158,  9141.83165125,\n",
       "        2009.26145417, 11297.69472525, 19609.78342417, 10360.69025275,\n",
       "       43565.99101275, 11587.859158  , 14211.60679667, 12296.544698  ,\n",
       "        7952.27868058,  5004.37250333, 23867.88832542, 27462.70916733,\n",
       "       48321.01558125,  2103.44803275, 11426.1575655 ,  1808.54786492,\n",
       "        5966.09867167,  9179.40725917, 33625.56126358, 35807.26376217,\n",
       "       28995.99073408, 12912.48578658, 24139.720547  ,  4845.67048833,\n",
       "        2274.24545292, 12274.04082258,  9786.11706567, 10657.42689942,\n",
       "        7320.98627242, 14113.87140542, 23207.24597867, 13476.89313317,\n",
       "        1627.12949208, 10918.821243  ,  6539.57510375, 39450.24668783,\n",
       "       10378.91630092,  2233.14796483,  3156.90582917,  6823.27847475,\n",
       "        2729.67036175,  2271.23979908, 13903.1005365 , 10381.01895567,\n",
       "        7369.33766025, 13036.54880333, 14978.79132742,  9524.82744167,\n",
       "        4411.37090883, 10329.261916  , 19919.89682058,  8221.825401  ,\n",
       "        4358.13335792,  1645.44846792,  9168.94678208,  5679.47497442,\n",
       "       12261.9520295 ,  1977.79277333,  4809.18832125,  6023.00564975,\n",
       "        6002.752859  ,  6264.04376142, 31698.62332508,  1973.86570017,\n",
       "       24392.77854125,  6490.04389333, 11321.72439208,  2620.94709275,\n",
       "        8592.09326575, 28460.72180308,  2849.81020158,  2649.79425742,\n",
       "       15449.88188708, 13702.94910825, 41194.19575583,  6331.52939925,\n",
       "        5423.43306208, 25200.658384  ,  4785.37911083,  2908.24703633,\n",
       "        7991.73124883, 11541.87962658,  5262.57839642,  4540.38033458,\n",
       "       13449.90068708, 46614.5616725 , 19223.25254092, 19325.316742  ,\n",
       "       16927.28672917, 43810.71365183,  4527.48903925, 11877.58294042,\n",
       "        7240.73860117,  1149.99093583,  8994.11497125, 14448.49136167,\n",
       "        9436.80298433,  7364.28480917,  6834.91838625,  3243.2244845 ,\n",
       "        6672.69384783,  5583.61814492, 14001.1338    ,  6814.01451042,\n",
       "        8138.16305233,  8043.550015  , 18163.30437292,  4224.81638625,\n",
       "       11961.39152458, 15486.55401383, 12653.97329967, 11826.018075  ,\n",
       "        6830.44853508,  2260.80986583,  2794.69637567,  8425.05027325,\n",
       "       16220.82298592,  5976.43422775,  4477.84717833,  6906.598505  ,\n",
       "        9739.76921175, 33730.56979458,  6730.21145008, 15663.36311442,\n",
       "        5988.38103583, 40540.01643133,  8395.61942142, 10887.49337317,\n",
       "       11543.65522142, 10547.63366617,  3976.40567983, 10765.90862942,\n",
       "        3337.693428  ,  7831.68206025, 19290.37151883, 46450.5553835 ,\n",
       "        8764.442821  ,  3279.67910142, 11763.2197125 ,  1704.53178625,\n",
       "        9137.50122067,  8130.88059729,  9865.91060125,  7055.08915742,\n",
       "        9142.80927017, 25338.43953125, 45225.05877375, 16420.89897792,\n",
       "        6551.36022417, 11532.73213875, 43079.72686025,  9294.632145  ,\n",
       "       39677.56851508,  1142.33853417, 43245.00056708,  5576.36943942,\n",
       "       12895.07603433,  6752.85684192, 39252.70845575,  7604.62853925,\n",
       "       10026.59567667,  9780.06887275,  2351.92362167, 19454.411801  ,\n",
       "       12223.55189042, 12037.69543775, 25901.83321125, 21344.8467    ,\n",
       "        7932.80651767,  3560.24168158, 10632.29865733, 22063.93927867,\n",
       "        3329.1165295 ,  1981.253636  ,  2755.82354708, 47445.01245083,\n",
       "        9768.53457142,  4826.82066483, 19452.59559225, 20698.65826233,\n",
       "       34782.70232067,  7062.05465275,  5799.22267108,  9579.52349383,\n",
       "        1639.5631    , 10799.22886867, 14984.63331292, 17635.64705917,\n",
       "       15940.89600483,  2783.25988125,  3208.968645  ,  9256.77995217,\n",
       "        9801.50881392, 15866.64284292, 21083.13835058,  6351.64155483,\n",
       "       17920.75383267,  2140.12712625,  6675.66045208,  8878.35836242,\n",
       "       17844.02872708,  2364.58466042,  9911.72214192, 48015.90930475,\n",
       "        8651.68345658, 14052.81093933,  2148.54444542,  8923.28612658,\n",
       "        3355.42842396, 12584.74252567, 46737.64625142, 19382.09495892,\n",
       "        9298.22824617, 43639.8363185 , 17160.37883542, 17311.23795417,\n",
       "        9629.70350867,  3361.6146675 , 28749.7331725 ,  4457.28640667,\n",
       "       14121.45484433,  1848.11281417, 18182.76107958,  3163.26402417,\n",
       "       24924.58076833,  8468.23705575,  4837.58626092, 46850.88203225,\n",
       "        6235.11791075,  5041.55777417, 33127.218314  ,  9860.7191025 ,\n",
       "       15408.554677  ,  3221.67617158, 12824.9237995 ,  3827.94375692,\n",
       "        6865.58063675,  7512.80257875, 44218.53534117, 12428.566872  ,\n",
       "       33948.7344275 , 37685.93161233,  6204.32010867, 11859.47525283,\n",
       "        1636.65395167,  3983.65305842,  3171.06653167,  9693.91252575,\n",
       "       45593.79960958, 10977.18218625,  1794.12205917, 16454.97012433,\n",
       "        2353.19930375,  9789.67469642, 15455.00007892,  1779.87439   ,\n",
       "        4045.48645783, 38486.60423817,  6813.62481742,  2177.807929  ,\n",
       "       39935.5553175 , 13383.59870267, 44058.44646117, 11498.02847375,\n",
       "        6642.99928708,  2355.78841792,  2485.03890167, 14030.87589642,\n",
       "        6223.73010342,  2217.903335  , 11430.24001492,  7355.11757158,\n",
       "        6472.72751417, 13269.61464183,  7728.62453292, 41241.70514225,\n",
       "        2011.90344192, 19536.7485325 ,  7895.24136146, 12739.77400675,\n",
       "       10900.54030625,  5445.0754925 , 17860.1151775 , 17038.05595267,\n",
       "       22933.62469458, 16164.36573042])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prd4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "d93fb1f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#finding the accuracy\n",
    "accuracy5=r2_score(y_test,prd4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9a675d0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.84360048542275"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50066b13",
   "metadata": {},
   "source": [
    "# XGBRegressor\n",
    "The XGBRegressor in Python is the regression-specific implementation of XGBoost and is used for regression problems where the intent is to predict continuous numerical values. objective is a required parameter representing the objective function to use for regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "3d98fbf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "ce5ad600",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb=XGBRegressor(n_estimators = 120)\n",
    "xgb.fit(x_train,y_train)\n",
    "prd5=xgb.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f1931ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9038.758  ,  9895.108  , 45481.355  , 11625.869  ,  8932.742  ,\n",
       "        5867.174  ,  2664.9573 , 10735.503  ,  7581.8535 ,  7257.8354 ,\n",
       "        7228.2    , 21013.072  ,  7102.779  ,  8590.28   , 29781.488  ,\n",
       "       14653.947  , 12448.699  ,  4874.239  ,  6056.6333 , 34123.773  ,\n",
       "       23420.605  , 20918.936  ,  9898.111  , 29815.92   ,  4711.46   ,\n",
       "        8105.253  ,  5190.2847 ,  7459.1587 ,  3541.6533 , 11918.399  ,\n",
       "        7194.3555 , 48131.93   , 16570.5    , 10778.011  , 15750.421  ,\n",
       "        4585.7217 ,  9371.159  , 36444.137  , 38791.5    ,   346.34155,\n",
       "        5030.222  ,  5274.85   , 20283.318  , 49044.914  , 34757.156  ,\n",
       "        1674.3961 , 16677.918  ,  8104.0806 ,  5153.7856 , 11847.468  ,\n",
       "        4445.829  ,  3217.8855 , 30394.938  , 46338.156  , 11551.767  ,\n",
       "        8308.033  ,  4340.0615 , 11035.776  , 14358.126  , 13950.516  ,\n",
       "        1045.6781 , 44098.035  , 16370.117  , 21915.209  , 15517.762  ,\n",
       "        8518.98   , 34715.03   , 45033.258  ,  6334.928  , 14459.535  ,\n",
       "       15452.465  , 12376.492  , 15754.784  , 14255.211  , 12038.242  ,\n",
       "       15258.739  , 12405.499  ,  9275.719  , 18435.895  , 51116.594  ,\n",
       "       11505.99   , 50335.88   ,  1396.4106 ,  9377.232  , 40685.164  ,\n",
       "       19102.62   ,  5233.319  ,  1499.671  , 14060.6875 , 38118.13   ,\n",
       "        8512.976  , 11120.829  ,  4093.0828 , 12235.456  ,  8506.071  ,\n",
       "        6893.623  , 42510.18   , 50583.945  ,  5852.211  , 10913.6875 ,\n",
       "        2612.077  , 14121.997  ,  6286.4316 , 37000.742  , 30245.691  ,\n",
       "        3897.742  , 11348.922  ,  7564.417  , 12101.555  , 45978.984  ,\n",
       "       15167.483  ,  6372.7075 ,  9547.61   , 34334.66   , 48190.344  ,\n",
       "        9154.704  ,  1686.7539 ,  9193.247  , 22881.701  , 11165.904  ,\n",
       "       40487.863  , 11329.112  , 14153.555  , 18289.312  , 11134.857  ,\n",
       "        6317.087  , 26522.338  , 26782.717  , 47915.027  ,  2176.2158 ,\n",
       "       11581.736  ,  3041.9106 ,  5608.0303 ,  8291.5    , 51260.85   ,\n",
       "       35703.332  , 20985.898  , 16139.52   , 23738.389  ,  5341.013  ,\n",
       "         371.54764, 12650.866  , 14651.244  , 10699.617  ,  4997.873  ,\n",
       "       13847.677  , 24866.508  ,  6572.261  ,  1802.5461 , 10017.11   ,\n",
       "        2616.9966 , 40678.69   , 12920.141  , 13059.755  ,  3543.0088 ,\n",
       "        8519.199  ,  1463.3412 ,  1681.8131 , 13144.222  , 10242.407  ,\n",
       "        9557.432  , 13135.264  , 13003.166  ,  8073.1553 ,  3974.3232 ,\n",
       "       11796.285  , 18479.91   ,  9581.254  ,  8197.89   ,  1344.6576 ,\n",
       "       11208.716  , 10551.836  , 11359.573  ,  2932.628  ,  8924.899  ,\n",
       "        6291.7354 ,  5102.386  ,  6540.2476 , 24705.941  ,  1459.4207 ,\n",
       "       18881.9    ,  6277.7046 , 11683.292  ,  3478.3486 ,  6226.1294 ,\n",
       "       27945.271  ,  2780.1104 ,  6780.1704 , 14097.112  , 16200.043  ,\n",
       "       43239.426  ,  3929.567  ,  5514.926  , 24471.242  ,  4020.644  ,\n",
       "        3718.2463 , 11211.368  ,  9927.907  ,  4657.109  ,  5316.295  ,\n",
       "       11499.441  , 48393.438  , 17534.371  , 20814.701  ,  7589.6143 ,\n",
       "       41106.734  ,  3765.6294 ,  9888.55   ,  5092.343  ,  1520.5448 ,\n",
       "        8486.367  , 13619.37   ,  5916.1484 ,  3096.3286 ,  5166.0986 ,\n",
       "        4795.574  ,  5607.0757 ,  6881.8867 , 16295.362  ,  7079.2197 ,\n",
       "        8507.211  , 12075.727  , 11575.8955 ,  4252.6045 , 12726.959  ,\n",
       "       14060.336  , 16784.057  , 11006.878  ,  4491.2847 ,   893.74414,\n",
       "       16893.986  ,  7995.9624 , 18074.738  ,  4653.5635 ,  4745.522  ,\n",
       "        7097.726  , 17618.738  , 34912.023  ,  6559.789  , 11279.5205 ,\n",
       "       12418.163  , 45001.793  ,  5985.9517 ,  8128.5444 , 10986.18   ,\n",
       "        9496.039  ,  3940.2761 ,  8886.246  ,  2788.1755 ,  5966.7397 ,\n",
       "       18758.812  , 46147.266  ,  3060.3477 ,  6271.9873 ,  4358.453  ,\n",
       "        1797.9098 ,  6798.678  ,  1441.6678 ,  6792.8984 , 12791.352  ,\n",
       "       11017.164  , 32785.605  , 44647.727  , 17129.25   ,  7389.071  ,\n",
       "       11370.169  , 40407.562  , 10870.101  , 44581.684  ,   756.0038 ,\n",
       "       42869.668  ,  5728.006  , 11554.459  ,  9028.169  , 38749.793  ,\n",
       "        7788.7354 , 10748.379  , 12917.664  ,  1911.6375 , 15147.247  ,\n",
       "       11755.538  ,  7951.6777 , 21995.998  , 20181.793  ,  8511.516  ,\n",
       "        1596.382  , 11673.969  , 20719.412  ,  2993.736  ,  1276.6702 ,\n",
       "        2213.4482 , 51874.13   ,  8949.995  ,  5536.84   , 17778.139  ,\n",
       "       11501.693  , 34912.914  , 11217.151  ,  4430.317  ,  8736.993  ,\n",
       "        1719.6091 ,  3532.7236 , 23308.793  , 17745.975  , 10646.351  ,\n",
       "         970.822  ,  2053.5613 , 14860.596  , 10468.975  , 17615.31   ,\n",
       "       20792.086  ,  6612.0947 , 16837.98   ,   932.67114,  4985.769  ,\n",
       "        6205.3804 , 18397.084  ,  1229.1498 , 10691.616  , 48253.32   ,\n",
       "        5013.3423 ,  9243.795  ,  1533.3954 , 10089.744  ,  2514.4785 ,\n",
       "       14860.779  , 46168.766  , 17839.436  ,  9097.516  , 45515.72   ,\n",
       "       19005.354  ,  7135.2085 , 14472.74   ,  3219.645  , 27728.863  ,\n",
       "        3862.345  , 15288.676  ,   748.9216 , 17948.93   ,  2644.4392 ,\n",
       "       24021.86   , 11284.925  ,  3562.8503 , 44786.418  ,  4794.8667 ,\n",
       "        4232.4824 , 28573.389  ,  2827.0679 ,  9643.585  ,   994.5817 ,\n",
       "       16392.299  ,  3057.2942 ,  6117.914  ,  7814.859  , 45697.555  ,\n",
       "       12775.755  , 47131.     , 39328.42   ,  5036.144  , 21329.734  ,\n",
       "         987.5173 , 10332.872  ,  2471.1777 , 10321.151  , 49123.03   ,\n",
       "       10305.149  ,  2060.47   , 14565.736  ,  2891.13   , 15323.221  ,\n",
       "        8120.317  ,  3878.455  ,  2675.9072 , 43753.312  ,  5377.5386 ,\n",
       "        6852.2744 , 41247.953  , 11271.973  , 45101.816  , 10437.435  ,\n",
       "       15761.083  ,  3205.8916 ,   876.5236 , 20811.127  , 13405.632  ,\n",
       "        2847.4697 , 10103.039  ,  7907.6304 ,  7244.02   ,  6712.6616 ,\n",
       "        3297.0771 , 44465.324  ,  -222.19107, 10746.7705 ,  6915.8047 ,\n",
       "        9165.486  , 10965.997  ,  3100.0916 , 17836.883  , 10221.192  ,\n",
       "       16422.607  , 18377.814  ], dtype=float32)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prd5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "8c5a0b86",
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy6=r2_score(y_test,prd5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "2280d24c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8161241971548543"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdcc9a4b",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "bf94c6ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[15410.68535675]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DELL LYF\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:439: UserWarning: X does not have valid feature names, but ExtraTreesRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "data=(19,1,27.900,0,0,1)\n",
    "input_array=np.asarray(data)\n",
    "data_reshape=input_array.reshape(1,-1)\n",
    "std_input=std.fit_transform(data_reshape)\n",
    "prd_m=et.predict(std_input)\n",
    "print(prd_m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "6c2a90a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "cost_results = pd.DataFrame({\n",
    "    'Model': [ 'Linear Regression', \n",
    "              'Random Forest Regressor', \n",
    "              'Decision Tree Regressor' ,\n",
    "              'knn',\n",
    "              'Extra tree Regressor',\n",
    "              'XGBRegressor'\n",
    "              ],\n",
    "    'Score': [ accuracy,\n",
    "              accuracy2, \n",
    "              accuracy1,\n",
    "             accuracy4,\n",
    "             accuracy5,\n",
    "             accuracy6]\n",
    "           })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "7f06d831",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.790751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest Regressor</td>\n",
       "      <td>0.868929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree Regressor</td>\n",
       "      <td>0.682022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>knn</td>\n",
       "      <td>0.171304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Extra tree Regressor</td>\n",
       "      <td>0.843600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>XGBRegressor</td>\n",
       "      <td>0.816124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Model     Score\n",
       "0        Linear Regression  0.790751\n",
       "1  Random Forest Regressor  0.868929\n",
       "2  Decision Tree Regressor  0.682022\n",
       "3                      knn  0.171304\n",
       "4     Extra tree Regressor  0.843600\n",
       "5             XGBRegressor  0.816124"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "02aafe92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABR8AAAIhCAYAAADHFs2PAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABVgUlEQVR4nO3dd5RV5fk/7HsoM0MndFQEFRHQYEGNQIwSKWIviXyjUgSJioKKEiXGXoixJ7FEpYgtqFgjFuwCFkSIKEgTxIIaNIJ1EHjeP3w5Pw9Dl+0Aua61zlqcZz9773sfzi7nM7sUpJRSAAAAAABsYOXKugAAAAAAYPMkfAQAAAAAMiF8BAAAAAAyIXwEAAAAADIhfAQAAAAAMiF8BAAAAAAyIXwEAAAAADIhfAQAAAAAMiF8BAAAAAAyIXwEANgIDR8+PAoKCqKgoCCee+65UsNTStG0adMoKCiIfffdd4POu6CgIC644IJ1Hm/u3LlRUFAQw4cPX+txpkyZEgUFBVGxYsWYP3/+Os8TAICNm/ARAGAjVq1atRgyZEip9ueffz5mz54d1apVK4OqNpxbb701IiKWLFkSI0aMKONqAADY0ISPAAAbsa5du8aoUaNi0aJFee1DhgyJNm3axNZbb11Glf14JSUlceedd8bOO+8cW265ZQwdOrSsS1qlb775JlJKZV0GAMAmR/gIALAR+93vfhcREXfffXeubeHChTFq1Kjo1avXSsf57LPPom/fvrHllltGYWFhbLvttnHOOedESUlJXr9FixZFnz59onbt2lG1atXYf//9Y8aMGSud5syZM+Poo4+OevXqRVFRUbRo0SKuv/76H7VsDz74YHz66adx/PHHR48ePWLGjBkxduzYUv1KSkrioosuihYtWkRxcXHUrl072rdvH+PHj8/1WbZsWfztb3+LXXbZJSpVqhQ1a9aMvfbaKx5++OFcn1VdTt6kSZPo2bNn7v3yS96ffPLJ6NWrV9StWzcqV64cJSUlMWvWrDjuuONi++23j8qVK8eWW24ZBx98cEyZMqXUdD///PM444wzYtttt42ioqKoV69eHHDAAfH2229HSim233776Ny5c6nxvvzyy6hRo0acfPLJ6/iJAgBsfISPAAAbserVq8dvfvObvLMC77777ihXrlx07dq1VP9vv/022rdvHyNGjIgBAwbEo48+Gscee2z85S9/iSOOOCLXL6UUhx12WNx+++1xxhlnxAMPPBB77bVXdOnSpdQ0p06dGnvssUe8+eabcdVVV8W//vWvOPDAA6N///5x4YUXrveyDRkyJIqKiuKYY46JXr16RUFBQalLzJcsWRJdunSJiy++OA466KB44IEHYvjw4dG2bduYN29erl/Pnj3j1FNPjT322CNGjhwZ//znP+OQQw6JuXPnrnd9vXr1iooVK8btt98e9913X1SsWDE+/PDDqF27dvz5z3+Oxx9/PK6//vqoUKFC/OIXv4jp06fnxv3iiy/il7/8ZfzjH/+I4447Lh555JG46aabolmzZjF//vwoKCiIfv36xZgxY2LmzJl58x0xYkQsWrRI+AgAbB4SAAAbnWHDhqWISBMmTEjPPvtsioj05ptvppRS2mOPPVLPnj1TSintuOOOaZ999smNd9NNN6WISPfcc0/e9C6//PIUEenJJ59MKaX02GOPpYhI1113XV6/Sy+9NEVEOv/883NtnTt3TltttVVauHBhXt9TTjklFRcXp88++yyllNKcOXNSRKRhw4atcfnmzp2bypUrl/7v//4v17bPPvukKlWqpEWLFuXaRowYkSIi3XLLLauc1gsvvJAiIp1zzjmrneeKy7Vc48aNU48ePXLvl3/23bt3X+NyLFmyJC1evDhtv/326fTTT8+1X3TRRSki0pgxY1Y57qJFi1K1atXSqaeemtfesmXL1L59+zXOGwBgU+DMRwCAjdw+++wT2223XQwdOjSmTJkSEyZMWOUl188880xUqVIlfvOb3+S1L7+s+Omnn46IiGeffTYiIo455pi8fkcffXTe+2+//TaefvrpOPzww6Ny5cqxZMmS3OuAAw6Ib7/9Nl5++eV1XqZhw4bFsmXL8pajV69e8dVXX8XIkSNzbY899lgUFxevcnmX94mIDX6m4JFHHlmqbcmSJXHZZZdFy5Yto7CwMCpUqBCFhYUxc+bMmDZtWl5NzZo1iw4dOqxy+tWqVYvjjjsuhg8fHl999VVEfP//N3Xq1DjllFM26LIAAJQV4SMAwEauoKAgjjvuuLjjjjtyl+7uvffeK+376aefRoMGDaKgoCCvvV69elGhQoX49NNPc/0qVKgQtWvXzuvXoEGDUtNbsmRJ/O1vf4uKFSvmvQ444ICIiFiwYME6Lc+yZcti+PDhscUWW0Tr1q3j888/j88//zw6dOgQVapUybv0+j//+U9sscUWUa7cqg9b//Of/0T58uVL1f5jNWzYsFTbgAED4txzz43DDjssHnnkkXjllVdiwoQJsfPOO8c333yTV9NWW221xnn069cvvvjii7jzzjsjIuLvf/97bLXVVnHooYduuAUBAChDFcq6AAAA1qxnz55x3nnnxU033RSXXnrpKvvVrl07XnnllUgp5QWQn3zySSxZsiTq1KmT67dkyZL49NNP8wLIjz76KG96P/vZz6J8+fLRrVu3VZ5ZuM0226zTsjz11FPx7rvv5upY0csvvxxTp06Nli1bRt26dWPs2LGxbNmyVQaQdevWjaVLl8ZHH3200sBwuaKiolIP3YmIXCC7ohUD3IiIO+64I7p37x6XXXZZXvuCBQuiZs2aeTW9//77q6xluaZNm0aXLl3i+uuvjy5dusTDDz8cF154YZQvX36N4wIAbAqc+QgAsAnYcsstY+DAgXHwwQdHjx49Vtlvv/32iy+//DIefPDBvPYRI0bkhkdEtG/fPiIid8bdcnfddVfe+8qVK0f79u1j0qRJ0apVq9h9991LvVYWIK7OkCFDoly5cvHggw/Gs88+m/e6/fbbIyJyD9jp0qVLfPvttzF8+PBVTm/5Q3JuvPHG1c63SZMm8cYbb+S1PfPMM/Hll1+ude0FBQVRVFSU1/boo4/GBx98UKqmGTNmxDPPPLPGaZ566qnxxhtvRI8ePaJ8+fLRp0+fta4HAGBj58xHAIBNxJ///Oc19unevXtcf/310aNHj5g7d278/Oc/j7Fjx8Zll10WBxxwQO4ehJ06dYpf/epX8Yc//CG++uqr2H333WPcuHG58O+HrrvuuvjlL38Ze++9d5x00knRpEmT+OKLL2LWrFnxyCOPrFXAttynn34aDz30UHTu3HmVlxZfc801MWLEiBg8eHD87ne/i2HDhsWJJ54Y06dPj/bt28eyZcvilVdeiRYtWsT//d//xd577x3dunWLSy65JD7++OM46KCDoqioKCZNmhSVK1eOfv36RUREt27d4txzz43zzjsv9tlnn5g6dWr8/e9/jxo1aqx1/QcddFAMHz48mjdvHq1atYqJEyfGFVdcUeoS69NOOy1GjhwZhx56aJx99tmx5557xjfffBPPP/98HHTQQbnwNyKiY8eO0bJly3j22Wfj2GOPjXr16q11PQAAGztnPgIAbEaKi4vj2WefjWOOOSauuOKK6NKlSwwfPjzOPPPMuP/++3P9ypUrFw8//HAcc8wx8Ze//CUOO+ywGD9+fIwePbrUNFu2bBmvv/567LTTTvGnP/0pOnXqFL1794777rsvdybl2rrjjjuipKQkTjjhhFX2+f3vfx//+c9/4pFHHokKFSrE6NGjY9CgQfHAAw/EoYceGt27d4+xY8dG48aNc+MMHz48rr766hg/fnz85je/iaOOOioeeuihvEvCBw4cGAMHDozhw4fHwQcfHKNGjYp77rkn73LpNbnuuuvi2GOPjcGDB8fBBx8cDz/8cNx///2x3Xbb5fWrVq1ajB07Nnr37h0333xzHHjggdGnT5+YPn16bLHFFqWme9RRR0VEeNAMALDZKUgppbIuAgAA/pftvvvuUVBQEBMmTCjrUgAANiiXXQMAQBlYtGhRvPnmm/Gvf/0rJk6cGA888EBZlwQAsMEJHwEAoAy8/vrr0b59+6hdu3acf/75cdhhh5V1SQAAG5zLrgEAAACATHjgDAAAAACQCeEjAAAAAJAJ4SMAAAAAkIn/uQfOLFu2LD788MOoVq1aFBQUlHU5AAAAALBJSSnFF198EVtssUWUK7f6cxv/58LHDz/8MBo1alTWZQAAAADAJu29996LrbbaarV9/ufCx2rVqkXE9x9O9erVy7gaAAAAANi0LFq0KBo1apTL2Vbnfy58XH6pdfXq1YWPAAAAALCe1uaWhh44AwAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkQvgIAAAAAGRC+AgAAAAAZEL4CAAAAABkokJZFwD8b5t30c/LugTIs/V5U8q6BAAAgM2GMx8BAAAAgEwIHwEAAACATAgfAQAAAIBMCB8BAAAAgEwIHwEAAACATAgfAQAAAIBMCB8BAAAAgEwIHwEAAACATAgfAQAAAIBMCB8BAAAAgEwIHwEAAACATAgfAQAAAIBMVCjrAgAAANh4/f2MR8q6BMhzylUHl3UJwDpw5iMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJCJCmVdAAAAAMDm5NJjf1PWJUAp59xxX5nM15mPAAAAAEAmhI8AAAAAQCaEjwAAAABAJoSPAAAAAEAmyjx8vOGGG2KbbbaJ4uLiaN26dbz44our7X/nnXfGzjvvHJUrV46GDRvGcccdF59++ulPVC0AAAAAsLbKNHwcOXJknHbaaXHOOefEpEmTYu+9944uXbrEvHnzVtp/7Nix0b179+jdu3e89dZbce+998aECRPi+OOP/4krBwAAAADWpEzDx6uvvjp69+4dxx9/fLRo0SKuvfbaaNSoUdx4440r7f/yyy9HkyZNon///rHNNtvEL3/5yzjhhBPitdde+4krBwAAAADWpMzCx8WLF8fEiROjU6dOee2dOnWK8ePHr3Sctm3bxvvvvx+jR4+OlFJ8/PHHcd9998WBBx64yvmUlJTEokWL8l4AAAAAQPbKLHxcsGBBLF26NOrXr5/XXr9+/fjoo49WOk7btm3jzjvvjK5du0ZhYWE0aNAgatasGX/7299WOZ/BgwdHjRo1cq9GjRpt0OUAAAAAAFauzB84U1BQkPc+pVSqbbmpU6dG//7947zzzouJEyfG448/HnPmzIkTTzxxldMfNGhQLFy4MPd67733Nmj9AAAAAMDKVSirGdepUyfKly9f6izHTz75pNTZkMsNHjw42rVrFwMHDoyIiFatWkWVKlVi7733jksuuSQaNmxYapyioqIoKira8AsAAAAAAKxWmZ35WFhYGK1bt44xY8bktY8ZMybatm270nG+/vrrKFcuv+Ty5ctHxPdnTAIAAAAAG48yO/MxImLAgAHRrVu32H333aNNmzZx8803x7x583KXUQ8aNCg++OCDGDFiREREHHzwwdGnT5+48cYbo3PnzjF//vw47bTTYs8994wtttiiLBclWg8cUabzhxVNvKJ7WZcAAAAA/I8r0/Cxa9eu8emnn8ZFF10U8+fPj5122ilGjx4djRs3joiI+fPnx7x583L9e/bsGV988UX8/e9/jzPOOCNq1qwZv/71r+Pyyy8vq0UAAAAAAFahTMPHiIi+fftG3759Vzps+PDhpdr69esX/fr1y7gqAAAAAODHKvOnXQMAAAAAmyfhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkAnhIwAAAACQCeEjAAAAAJAJ4SMAAAAAkIkKZV0AALBu2v2tXVmXAKWM6zeurEsAAGAj5MxHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATwkcAAAAAIBPCRwAAAAAgE8JHAAAAACATZR4+3nDDDbHNNttEcXFxtG7dOl588cXV9i8pKYlzzjknGjduHEVFRbHddtvF0KFDf6JqAQAAAIC1VaEsZz5y5Mg47bTT4oYbboh27drFP/7xj+jSpUtMnTo1tt5665WOc9RRR8XHH38cQ4YMiaZNm8Ynn3wSS5Ys+YkrBwAAAADWpEzDx6uvvjp69+4dxx9/fEREXHvttfHEE0/EjTfeGIMHDy7V//HHH4/nn38+3nnnnahVq1ZERDRp0uSnLBkAAAAAWEtldtn14sWLY+LEidGpU6e89k6dOsX48eNXOs7DDz8cu+++e/zlL3+JLbfcMpo1axZnnnlmfPPNN6ucT0lJSSxatCjvBQAAAABkr8zOfFywYEEsXbo06tevn9dev379+Oijj1Y6zjvvvBNjx46N4uLieOCBB2LBggXRt2/f+Oyzz1Z538fBgwfHhRdeuMHrBwAAAABWr8wfOFNQUJD3PqVUqm25ZcuWRUFBQdx5552x5557xgEHHBBXX311DB8+fJVnPw4aNCgWLlyYe7333nsbfBkAAAAAgNLK7MzHOnXqRPny5Uud5fjJJ5+UOhtyuYYNG8aWW24ZNWrUyLW1aNEiUkrx/vvvx/bbb19qnKKioigqKtqwxQMAAAAAa1RmZz4WFhZG69atY8yYMXntY8aMibZt2650nHbt2sWHH34YX375Za5txowZUa5cudhqq60yrRcAAAAAWDdletn1gAED4tZbb42hQ4fGtGnT4vTTT4958+bFiSeeGBHfXzLdvXv3XP+jjz46ateuHccdd1xMnTo1XnjhhRg4cGD06tUrKlWqVFaLAQAAAACsRJlddh0R0bVr1/j000/joosuivnz58dOO+0Uo0ePjsaNG0dExPz582PevHm5/lWrVo0xY8ZEv379Yvfdd4/atWvHUUcdFZdccklZLQIAAAAAsAplGj5GRPTt2zf69u270mHDhw8v1da8efNSl2oDAAAAABufMn/aNQAAAACweRI+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmfhR4ePixYtj+vTpsWTJkg1VDwAAAACwmViv8PHrr7+O3r17R+XKlWPHHXeMefPmRURE//79489//vMGLRAAAAAA2DStV/g4aNCg+Pe//x3PPfdcFBcX59o7dOgQI0eO3GDFAQAAAACbrgrrM9KDDz4YI0eOjL322isKCgpy7S1btozZs2dvsOIAAAAAgE3Xep35+J///Cfq1atXqv2rr77KCyMBAAAAgP9d6xU+7rHHHvHoo4/m3i8PHG+55ZZo06bNhqkMAAAAANikrddl14MHD479998/pk6dGkuWLInrrrsu3nrrrXjppZfi+eef39A1AgAAAACboPU687Ft27Yxfvz4+Prrr2O77baLJ598MurXrx8vvfRStG7dekPXCAAAAABsgtb5zMfvvvsufv/738e5554bt912WxY1AQAAAACbgXU+87FixYrxwAMPZFELAAAAALAZWa/Lrg8//PB48MEHN3ApAAAAAMDmZL0eONO0adO4+OKLY/z48dG6deuoUqVK3vD+/ftvkOIAAAAAgE3XeoWPt956a9SsWTMmTpwYEydOzBtWUFAgfAQAAAAA1i98nDNnzoauAwAAAADYzKzXPR9/KKUUKaUNUQsAAAAAsBlZ7/BxxIgR8fOf/zwqVaoUlSpVilatWsXtt9++IWsDAAAAADZh63XZ9dVXXx3nnntunHLKKdGuXbtIKcW4cePixBNPjAULFsTpp5++oesEAAAAADYx6xU+/u1vf4sbb7wxunfvnms79NBDY8cdd4wLLrhA+AgAAAAArN9l1/Pnz4+2bduWam/btm3Mnz//RxcFAAAAAGz61it8bNq0adxzzz2l2keOHBnbb7/9jy4KAAAAANj0rddl1xdeeGF07do1XnjhhWjXrl0UFBTE2LFj4+mnn15pKAkAAAAA/O9ZrzMfjzzyyHjllVeiTp068eCDD8b9998fderUiVdffTUOP/zwDV0jAAAAALAJWq8zHyMiWrduHXfccceGrAUAAAAA2Iys15mPo0ePjieeeKJU+xNPPBGPPfbYjy4KAAAAANj0rVf4ePbZZ8fSpUtLtaeU4uyzz/7RRQEAAAAAm771Ch9nzpwZLVu2LNXevHnzmDVr1o8uCgAAAADY9K1X+FijRo145513SrXPmjUrqlSp8qOLAgAAAAA2fesVPh5yyCFx2mmnxezZs3Nts2bNijPOOCMOOeSQDVYcAAAAALDpWq/w8YorrogqVapE8+bNY5tttoltttkmmjdvHrVr144rr7xyQ9cIAAAAAGyCKqzPSDVq1Ijx48fHmDFj4t///ndUqlQpdt5559h77703dH0AAAAAwCZqnc58fOWVV+Kxxx6LiIiCgoLo1KlT1KtXL6688so48sgj4/e//32UlJRkUigAAAAAsGlZp/DxggsuiDfeeCP3fsqUKdGnT5/o2LFjnH322fHII4/E4MGDN3iRAAAAAMCmZ53Cx8mTJ8d+++2Xe//Pf/4z9txzz7jllltiwIAB8de//jXuueeeDV4kAAAAALDpWafw8b///W/Ur18/9/7555+P/fffP/d+jz32iPfee2/DVQcAAAAAbLLWKXysX79+zJkzJyIiFi9eHK+//nq0adMmN/yLL76IihUrbtgKAQAAAIBN0jqFj/vvv3+cffbZ8eKLL8agQYOicuXKeU+4fuONN2K77bbb4EUCAAAAAJueCuvS+ZJLLokjjjgi9tlnn6hatWrcdtttUVhYmBs+dOjQ6NSp0wYvEgAAAADY9KxT+Fi3bt148cUXY+HChVG1atUoX7583vB77703qlatukELBAAAAAA2TesUPi5Xo0aNlbbXqlXrRxUDAAAAAGw+1umejwAAAAAAa0v4CAAAAABkoszDxxtuuCG22WabKC4ujtatW8eLL764VuONGzcuKlSoELvssku2BQIAAAAA66VMw8eRI0fGaaedFuecc05MmjQp9t577+jSpUvMmzdvteMtXLgwunfvHvvtt99PVCkAAAAAsK7KNHy8+uqro3fv3nH88cdHixYt4tprr41GjRrFjTfeuNrxTjjhhDj66KOjTZs2P1GlAAAAAMC6KrPwcfHixTFx4sTo1KlTXnunTp1i/Pjxqxxv2LBhMXv27Dj//PPXaj4lJSWxaNGivBcAAAAAkL0yCx8XLFgQS5cujfr16+e1169fPz766KOVjjNz5sw4++yz484774wKFSqs1XwGDx4cNWrUyL0aNWr0o2sHAAAAANaszB84U1BQkPc+pVSqLSJi6dKlcfTRR8eFF14YzZo1W+vpDxo0KBYuXJh7vffeez+6ZgAAAABgzdbu9MEM1KlTJ8qXL1/qLMdPPvmk1NmQERFffPFFvPbaazFp0qQ45ZRTIiJi2bJlkVKKChUqxJNPPhm//vWvS41XVFQURUVF2SwEAAAAALBKZXbmY2FhYbRu3TrGjBmT1z5mzJho27Ztqf7Vq1ePKVOmxOTJk3OvE088MXbYYYeYPHly/OIXv/ipSgcAAAAA1kKZnfkYETFgwIDo1q1b7L777tGmTZu4+eabY968eXHiiSdGxPeXTH/wwQcxYsSIKFeuXOy0005549erVy+Ki4tLtQMAAAAAZa9Mw8euXbvGp59+GhdddFHMnz8/dtpppxg9enQ0btw4IiLmz58f8+bNK8sSAQAAAID1VKbhY0RE3759o2/fvisdNnz48NWOe8EFF8QFF1yw4YsCAAAAAH60Mn/aNQAAAACweRI+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmSjz8PGGG26IbbbZJoqLi6N169bx4osvrrLv/fffHx07doy6detG9erVo02bNvHEE0/8hNUCAAAAAGurTMPHkSNHxmmnnRbnnHNOTJo0Kfbee+/o0qVLzJs3b6X9X3jhhejYsWOMHj06Jk6cGO3bt4+DDz44Jk2a9BNXDgAAAACsSYWynPnVV18dvXv3juOPPz4iIq699tp44okn4sYbb4zBgweX6n/ttdfmvb/sssvioYceikceeSR23XXXlc6jpKQkSkpKcu8XLVq04RYAAAAAAFilMjvzcfHixTFx4sTo1KlTXnunTp1i/PjxazWNZcuWxRdffBG1atVaZZ/BgwdHjRo1cq9GjRr9qLoBAAAAgLVTZuHjggULYunSpVG/fv289vr168dHH320VtO46qqr4quvvoqjjjpqlX0GDRoUCxcuzL3ee++9H1U3AAAAALB2yvSy64iIgoKCvPcppVJtK3P33XfHBRdcEA899FDUq1dvlf2KioqiqKjoR9cJAAAAAKybMgsf69SpE+XLly91luMnn3xS6mzIFY0cOTJ69+4d9957b3To0CHLMgEAAACA9VRml10XFhZG69atY8yYMXntY8aMibZt265yvLvvvjt69uwZd911Vxx44IFZlwkAAAAArKcyvex6wIAB0a1bt9h9992jTZs2cfPNN8e8efPixBNPjIjv79f4wQcfxIgRIyLi++Cxe/fucd1118Vee+2VO2uyUqVKUaNGjTJbDgAAAACgtDINH7t27RqffvppXHTRRTF//vzYaaedYvTo0dG4ceOIiJg/f37Mmzcv1/8f//hHLFmyJE4++eQ4+eSTc+09evSI4cOH/9TlAwAAAACrUeYPnOnbt2/07dt3pcNWDBSfe+657AsCAAAAADaIMrvnIwAAAACweRM+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmahQ1gUAAMBP4flf7VPWJUCefV54vqxLAIDMOfMRAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMhEmYePN9xwQ2yzzTZRXFwcrVu3jhdffHG1/Z9//vlo3bp1FBcXx7bbbhs33XTTT1QpAAAAALAuyjR8HDlyZJx22mlxzjnnxKRJk2LvvfeOLl26xLx581baf86cOXHAAQfE3nvvHZMmTYo//vGP0b9//xg1atRPXDkAAAAAsCZlGj5effXV0bt37zj++OOjRYsWce2110ajRo3ixhtvXGn/m266Kbbeeuu49tpro0WLFnH88cdHr1694sorr/yJKwcAAAAA1qRCWc148eLFMXHixDj77LPz2jt16hTjx49f6TgvvfRSdOrUKa+tc+fOMWTIkPjuu++iYsWKpcYpKSmJkpKS3PuFCxdGRMSiRYt+7CLkWVryzQadHvxYG/o7npUvvl1a1iVAnk1h3VnyzZKyLgFK2RTWna+WWHfYuGwK601ExDclX5d1CZBnU1h3vv3uu7IuAUrZkOvO8mmllNbYt8zCxwULFsTSpUujfv36ee3169ePjz76aKXjfPTRRyvtv2TJkliwYEE0bNiw1DiDBw+OCy+8sFR7o0aNfkT1sPGr8bcTy7oE2DQNrlHWFcAmqcZZ1h1YZzWsN7A+/nB9WVcAm6ZL7tnw+50vvvgiaqxhf1Zm4eNyBQUFee9TSqXa1tR/Ze3LDRo0KAYMGJB7v2zZsvjss8+idu3aq50PZWPRokXRqFGjeO+996J69eplXQ5sEqw3sH6sO7B+rDuw7qw3sH6sOxuvlFJ88cUXscUWW6yxb5mFj3Xq1Iny5cuXOsvxk08+KXV243INGjRYaf8KFSpE7dq1VzpOUVFRFBUV5bXVrFlz/QvnJ1G9enUbFlhH1htYP9YdWD/WHVh31htYP9adjdOaznhcrsweOFNYWBitW7eOMWPG5LWPGTMm2rZtu9Jx2rRpU6r/k08+GbvvvvtK7/cIAAAAAJSdMn3a9YABA+LWW2+NoUOHxrRp0+L000+PefPmxYknfn+vukGDBkX37t1z/U888cR49913Y8CAATFt2rQYOnRoDBkyJM4888yyWgQAAAAAYBXK9J6PXbt2jU8//TQuuuiimD9/fuy0004xevToaNy4cUREzJ8/P+bNm5frv80228To0aPj9NNPj+uvvz622GKL+Otf/xpHHnlkWS0CG1hRUVGcf/75pS6VB1bNegPrx7oD68e6A+vOegPrx7qzeShIa/NMbAAAAACAdVSml10DAAAAAJsv4SMAAAAAkAnhIwAAAACQCeHjJq6goCAefPDBsi7jf87w4cOjZs2aZV0G66BJkyZx7bXXlnUZsElal/XHugabpn333TdOO+20si4DANgMCR83cj179ozDDjtslcPnz58fXbp0+ekKWkcFBQW5V9WqVWPnnXeO4cOHl3VZP1rXrl1jxowZZV3GJqVnz56570KFChVi6623jpNOOin++9//lnVpmbrgggvy1oPlr6eeeqpMa9pll13Wqt/yesuVKxdbbLFFHHPMMfHee+9lXyRr9MN1qmLFilG/fv3o2LFjDB06NJYtW7ZB5zVhwoT4/e9/v8H7ro8fLveqXj+VfffdNzfPwsLC2G677WLQoEFRUlLyk9UAsDFa1bZ6//33X+tpZB2Ir+3xUJY2199KbFyWLl0abdu2jSOPPDKvfeHChdGoUaP405/+lGsbNWpU/PrXv46f/exnUbly5dhhhx2iV69eMWnSpFyf4cOHl/rutm7dOu6///686TtO4oeEj5u4Bg0alPkj51NKsWTJklUOHzZsWMyfPz/+/e9/R9euXeO4446LJ554ItOaFi9enOn0K1WqFPXq1ct0Hpuj/fffP+bPnx9z586NW2+9NR555JHo27dvWZeVuR133DHmz5+f9/rVr361XtPK+ru9ouW1v//++zFy5MiYMmVKHHXUUZnP97vvvst8Huti6dKlGzzQ2xB+uE499thj0b59+zj11FPjoIMOWu12eV3VrVs3KleuvMH7ro/rrrsub12K+H/7mR+2LZf1OtOnT5+YP39+zJo1K/7yl7/E9ddfHxdccEGm89wYv48/9bYJ2Pgt30f98HX33Xdv0Hms6XfIhpD1Mcnm+FtpfWyMNW0uypcvH7fddls8/vjjceedd+ba+/XrF7Vq1YrzzjsvIiLOOuus6Nq1a+yyyy7x8MMPx1tvvRU333xzbLfddvHHP/4xb5rVq1fPrdeTJk2Kzp07x1FHHRXTp0/P6+c46Xu+3xGR2Kj16NEjHXrooascHhHpgQceSCmlNGfOnBQRadSoUWnfffdNlSpVSq1atUrjx4/PG2fcuHFp7733TsXFxWmrrbZK/fr1S19++WVu+O23355at26dqlatmurXr59+97vfpY8//jg3/Nlnn00RkR5//PHUunXrVLFixfTMM8+ssb7latWqlQYMGJB7//nnn6c+ffqkunXrpmrVqqX27dunyZMn541z8cUXp7p166aqVaum3r17p7POOivtvPPOpT6nyy67LDVs2DA1btw4pZTS+++/n4466qhUs2bNVKtWrXTIIYekOXPm5C3LHnvskSpXrpxq1KiR2rZtm+bOnZtSSmny5Mlp3333TVWrVk3VqlVLu+22W5owYUJKKaVhw4alGjVq5NV4ww03pG233TZVrFgxNWvWLI0YMaLUZ3HLLbekww47LFWqVCk1bdo0PfTQQyv93DZHK/suDxgwINWqVSv3fsmSJalXr16pSZMmqbi4ODVr1ixde+21K53OFVdckRo0aJBq1aqV+vbtmxYvXpzr8/HHH6eDDjooFRcXpyZNmqQ77rgjNW7cOF1zzTW5Pu+++2465JBDUpUqVVK1atXSb3/72/TRRx/lhp9//vlp5513TkOGDEmNGjVKVapUSSeeeGJasmRJuvzyy1P9+vVT3bp10yWXXLLa5V4+nVV54403Uvv27VNxcXGqVatW6tOnT/riiy9KLe+G+m4PGzYsRUTea9iwYWtd+1//+tcUEWnhwoW5tocffjjttttuqaioKG2zzTbpggsuSN99911u+LRp01K7du1SUVFRatGiRRozZsxKt10jR45M++yzTyoqKkpDhw5NKaU0dOjQ1Lx581RUVJR22GGHdP311+emW1JSkk4++eTUoEGDVFRUlBo3bpwuu+yyvPobNWqUCgsLU8OGDVO/fv1ywz777LPUrVu3VLNmzVSpUqW0//77pxkzZuSGL1/HH3nkkdSiRYtUvnz59M4776zy/7EsrGr/8PTTT+e2N8utzXb2oYceSq1bt05FRUWpdu3a6fDDD88NW3H9Wd1nu77r2ogRI1Ljxo1T9erVU9euXdOiRYvW6nNYcT+zzz77pJNPPjmdfvrpqXbt2ulXv/pVSimlt956K3Xp0iVVqVIl1atXLx177LHpP//5T268ZcuWpcsvvzxts802qbi4OLVq1Srde++9q533Pvvsk0499dS8tiOOOCLttttu6zTdhx56KDVt2jQVFxenfffdNw0fPjxFRPrvf/+bUlr197GkpCQNHDgwbbHFFqly5cppzz33TM8++2xuunPnzk0HHXRQqlmzZqpcuXJq2bJlevTRR1NK368DRx99dKpTp04qLi5OTZs2za13Ka3/tolN14rf58ceeyxVr1493XbbbWu1723cuHG69NJL03HHHZeqVq2aGjVqlP7xj3+UwZKwMVjTb5hnn302VaxYMb3wwgu5tiuvvDLVrl07ffjhh6lHjx6ljlfmzJmzyt8hs2bNSoccckiqV69eqlKlStp9993TmDFjVjn/1R0PRUS68cYb0yGHHJIqV66czjvvvJTSmo931mZfu6LN9bdSSindd999qWXLlqmwsDA1btw4XXnllXk1N27cOF188cWpR48eqXr16ql79+6r/az48a677rr0s5/9LH3wwQfpwQcfTBUrVkyTJk1KKaX00ksvpYhI11133UrHXbZsWe7fK/stvHTp0lSxYsV0zz335NocJzlO+iHh40ZufcLH5s2bp3/9619p+vTp6Te/+U1q3Lhxbsf4xhtvpKpVq6ZrrrkmzZgxI40bNy7tuuuuqWfPnrlpDhkyJI0ePTrNnj07vfTSS2mvvfZKXbp0yQ1fvtNv1apVevLJJ9OsWbPSggUL1ljfkiVL0siRI1NEpLPOOiul9P3Gpl27dunggw9OEyZMSDNmzEhnnHFGql27dvr0009TSindcccdqbi4OA0dOjRNnz49XXjhhal69eqldqhVq1ZN3bp1S2+++WaaMmVK+uqrr9L222+fevXqld544400derUdPTRR6cddtghlZSUpO+++y7VqFEjnXnmmWnWrFlp6tSpafjw4endd99NKaW04447pmOPPTZNmzYtzZgxI91zzz25Hf2KG9z7778/VaxYMV1//fVp+vTp6aqrrkrly5fPC2UjIm211VbprrvuSjNnzkz9+/dPVatWzS3n5m7F7/Ls2bNTy5YtU/369XNtixcvTuedd1569dVX0zvvvJPuuOOOVLly5TRy5Mi86VSvXj2deOKJadq0aemRRx5JlStXTjfffHOuT5cuXdJOO+2Uxo8fn1577bXUtm3bVKlSpVwgsmzZsrTrrrumX/7yl+m1115LL7/8ctptt93SPvvsk5vG+eefn6pWrZp+85vfpLfeeis9/PDDqbCwMHXu3Dn169cvvf3222no0KEpItJLL720yuVeXfj41VdfpS222CIdccQRacqUKenpp59O22yzTerRo0fe8m7I7/bXX3+dzjjjjLTjjjum+fPnp/nz56evv/56rWqfP39+2nfffVP58uVzf7B4/PHHU/Xq1dPw4cPT7Nmz05NPPpmaNGmSLrjggpTS9wciO+ywQ+rYsWOaPHlyevHFF9Oee+650m1XkyZN0qhRo9I777yTPvjgg3TzzTenhg0b5tpGjRqVatWqlYYPH55SSumKK65IjRo1Si+88EKaO3duevHFF9Ndd92VUkrp3nvvTdWrV0+jR49O7777bnrllVfyviOHHHJIatGiRXrhhRfS5MmTU+fOnVPTpk1zP6SHDRuWKlasmNq2bZvGjRuX3n777bw/0mwMVrd/2HnnnXPb7bXZzv7rX/9K5cuXT+edd16aOnVqmjx5crr00ktz0/thoLimz/aHfddlXVu+HrzwwgupQYMG6Y9//ONafQ4rCx+rVq2aBg4cmN5+++00bdq09OGHH6Y6deqkQYMGpWnTpqXXX389dezYMbVv3z433h//+MfUvHnz9Pjjj6fZs2enYcOGpaKiovTcc8+tct4rHlRPnjw51a9fP/3iF79Y6+nOmTMnVaxYMZ155pnp7bffTnfffXfacsstSx1Ur+z7ePTRR6e2bdumF154Ic2aNStdccUVqaioKBekH3jggaljx47pjTfeSLNnz06PPPJIev7551NKKZ188slpl112SRMmTEhz5sxJY8aMSQ8//HBKaf23TWzafvh9vvvuu1O1atXSgw8+mFJau31v48aNU61atdL111+fZs6cmQYPHpzKlSuXpk2bVhaLQxlb02+YlFIaOHBgaty4cfr888/T5MmTU1FRUbr//vtTSt8Hbm3atEl9+vTJHa8sWbJklb9DJk+enG666ab0xhtvpBkzZqRzzjknFRcX547rV7S646GISPXq1UtDhgxJs2fPTnPnzl3j8c7a7GtXZnP9rfTaa6+lcuXKpYsuuihNnz49DRs2LFWqVCnvD97L/+B4xRVXpJkzZ6aZM2eu9vvCj7ds2bK07777pv322y/Vq1cvXXzxxblhy3+b/jBQX5UVfwsvWbIkDR06NFWsWDHNmjUr1+44yXHSDwkfN3LrEz7eeuutueFvvfVWiojcgV+3bt3S73//+7xpvPjii6lcuXLpm2++Wek8Xn311RQRuSR/+U5/+QHp6kREKi4uTlWqVEnly5dPEZFq1aqV27k8/fTTqXr16unbb7/NG2+77bbL/bX8F7/4RTr55JPzhrdr167UDrV+/fqppKQk1zZkyJC0ww475P2VpqSkJFWqVCk98cQT6dNPP00RscofltWqVcuFHCtacYPbtm3b1KdPn7w+v/3tb9MBBxyQ91n86U9/yr3/8ssvU0FBQXrsscdWOo/NTY8ePVL58uVTlSpVUnFxce6vzFdfffVqx+vbt2868sgj86bTuHHjtGTJklzbb3/729S1a9eUUkrTp09PEZFefvnl3PBp06aliMgFIk8++WQqX758mjdvXq7P8nXl1VdfTSl9H4hUrlw57+yrzp07pyZNmqSlS5fm2nbYYYc0ePDgVdZ//vnnp3LlyqUqVarkXnvssUdKKaWbb745/exnP8sLtR599NFUrly53JlhWXy313Q25spqr1SpUu7/rH///rk+e++9d97Zhil9f/Z0w4YNU0rfnzlToUKFNH/+/NzwVZ35uOJZro0aNcqFictdfPHFqU2bNimllPr165d+/etf530Oy1111VWpWbNmeWflLDdjxowUEWncuHG5tgULFqRKlSrl/lq7/IyINZ2xUJZWt3/o2rVratGiRUpp7bazbdq0Scccc8wq5/XDQHF1n+2Kfdd3XRs4cGDegenqrCx83GWXXfL6nHvuualTp055be+9916KiDR9+vT05ZdfpuLi4lJXCvTu3Tv97ne/W+W899lnn1SxYsVUpUqVVFhYmCIilStXLt13330ppbRW0z3rrLPSTjvtlDf8nHPOKXVQveL3cdasWamgoCB98MEHeePut99+adCgQSmllH7+85/nfhiv6OCDD07HHXfcSoet77aJTdvyH4nXX399qlGjRt4fUNe0703p+3X/2GOPzb1ftmxZqlevXrrxxht/mgVgo/LD474fvi666KJcn5KSkrTrrrumo446Ku24447p+OOPz5vGys6aWpffIS1btkx/+9vfVjl8VcdDEZFOO+20vLY1He+szb52ZTbX30pHH3106tixY17bwIEDU8uWLXPvGzdunA477LBVfTRkZPnvop///Od5QeP++++fWrVqldf3qquuylt/P//885TS/zsuWd5erly5VFRUVOpqKsdJjpN+qMI6X6fNRq9Vq1a5fzds2DAiIj755JNo3rx5TJw4MWbNmpV3r4eUUixbtizmzJkTLVq0iEmTJsUFF1wQkydPjs8++yx3v4R58+ZFy5Ytc+Ptvvvua1XPNddcEx06dIj33nsvBgwYEKeffno0bdo0IiImTpwYX375ZdSuXTtvnG+++SZmz54dERHTp08vdV/APffcM5555pm8tp///OdRWFiYe798WatVq5bX79tvv43Zs2dHp06domfPntG5c+fo2LFjdOjQIY466qjcZzZgwIA4/vjj4/bbb48OHTrEb3/729huu+1WuozTpk0r9YCFdu3axXXXXZfX9sP/mypVqkS1atXik08+WfkHtxlq37593HjjjfH111/HrbfeGjNmzIh+/frl9bnpppvi1ltvjXfffTe++eabWLx4cambge+4445Rvnz53PuGDRvGlClTIuL7/4sKFSrkfT+bN2+e93TyadOmRaNGjaJRo0a5tpYtW0bNmjVj2rRpsccee0TE90/t/eH3p379+lG+fPkoV65cXtua/g932GGHePjhh3Pvl9+nddq0abHzzjtHlSpVcsPatWsXy5Yti+nTp0f9+vUjYsN/t9fF8tpLSkrioYceinvvvTcuvfTSvFomTJiQ17Z06dL49ttv4+uvv47p06dHo0aNokGDBrnhe+6550rn9cP/s//85z/x3nvvRe/evaNPnz659iVLlkSNGjUi4vub2Xfs2DF22GGH2H///eOggw6KTp06RUTEb3/727j22mtj2223jf333z8OOOCAOPjgg6NChQq578gvfvGL3HRr164dO+ywQ0ybNi3XVlhYmLfObkpSSrkHr6zNdnby5Ml5n/PqrO6zXdH6rmsNGzb8UdvGFfdPEydOjGeffTaqVq1aqu/s2bNj4cKF8e2330bHjh3zhi1evDh23XXX1c7rmGOOiXPOOScWLVoUl19+eVSvXj13Q/epU6eucbrTp0/PfQ7LrWwdWfH7+Prrr0dKKZo1a5bXr6SkJPd/3b9//zjppJPiySefjA4dOsSRRx6Zm8ZJJ50URx55ZLz++uvRqVOnOOyww6Jt27YRsf7bJjZ9o0aNio8//jjGjh1b6nu4un3vcj/8jhYUFESDBg3+p45zyLf8uO+HatWqlft3YWFh3HHHHdGqVato3LhxXHvttWs97RW381999VVceOGF8a9//Ss+/PDDWLJkSXzzzTcxb9689ap9ZfuR1R3vrM2+dlU2x99K06ZNi0MPPTRvuu3atYtrr702li5dmtuWrO3vSTacoUOHRuXKlWPOnDnx/vvvR5MmTXLDVnxoX69eveKQQw6JV155JY499thIKeWGVatWLV5//fWIiPj666/jqaeeihNOOCFq164dBx98cK6f4yTHScsJHzdDFStWzP17+QZkeYC4bNmyOOGEE6J///6lxtt6663jq6++ik6dOkWnTp3ijjvuiLp168a8efOic+fOpW6S+sOVbXUaNGgQTZs2jaZNm8a9994bu+66a+y+++7RsmXLWLZsWTRs2DCee+65UuP9MCxacUP4ww3fqupZtmxZtG7dOi9oXa5u3boR8f0Nnvv37x+PP/54jBw5Mv70pz/FmDFjYq+99ooLLrggjj766Hj00Ufjsccei/PPPz/++c9/xuGHH77S5VxZjSu2/fD/Zvk4G9vNcLNUpUqV3MHUX//612jfvn1ceOGFcfHFF0dExD333BOnn356XHXVVdGmTZuoVq1aXHHFFfHKK6/kTWd1n+Py78bqnni7sv+blbWvbD7r839YWFiYW+61qWPF+jf0d3td/LD2HXfcMWbOnBknnXRS3H777blaLrzwwjjiiCNKjVtcXLzaZVzRD5dz+Wd6yy235IWEEZE7YN1tt91izpw58dhjj8VTTz0VRx11VHTo0CHuu+++aNSoUUyfPj3GjBkTTz31VPTt2zeuuOKKeP7551e6/Ygo/f9RqVKln/TJyRvStGnTYptttomIWKvtbKVKldZ62qv7bFdcP37MuvZjto0rW2cOPvjguPzyy0v1bdiwYbz55psREfHoo4/GlltumTd8TQ91q1GjRm4dueOOO2LHHXeMIUOGRO/evXPLsLrpruwzWtl3dMXv47Jly6J8+fIxceLEvEAoInIh6/HHHx+dO3eORx99NJ588skYPHhwXHXVVdGvX7/o0qVLvPvuu/Hoo4/GU089Ffvtt1+cfPLJceWVV673tolN3y677BKvv/56DBs2LPbYY491Xk//149zyPfD475VGT9+fEREfPbZZ/HZZ5+t9XZlxX4DBw6MJ554Iq688spo2rRpVKpUKX7zm9+s90MeVrYfWd3xztr+plmZzfG30tru2+xHflovvfRSXHPNNfHYY4/FX/7yl+jdu3c89dRTUVBQENtvv32MHTs2vvvuu9y2vGbNmlGzZs14//33S02rXLlyeet3q1at4sknn4zLL788L3x0nMRynnb9P2a33XaLt956K7eD++GrsLAw3n777ViwYEH8+c9/jr333juaN2++Qf9i3bRp0zjyyCNj0KBBuXo++uijqFChQql66tSpExHfn3n16quv5k3ntddeW6tlnTlzZtSrV6/UtJefORURseuuu8agQYNi/PjxsdNOO8Vdd92VG9asWbM4/fTT48knn4wjjjgihg0bttJ5tWjRIsaOHZvXNn78+GjRosXafTD/o84///y48sor48MPP4yIiBdffDHatm0bffv2jV133TWaNm26xr8Wr6hFixaxZMmSvO/I9OnT4/PPP8+9b9myZcybNy/ee++9XNvUqVNj4cKFP+n/WcuWLWPy5Mnx1Vdf5drGjRsX5cqVK/VXuh/6sd/twsLCWLp06XrVfO6558bdd9+d+0vnbrvtFtOnT1/pNqVcuXLRvHnzmDdvXnz88ce5aUyYMGGN86lfv35sueWW8c4775Sa7vJQLeL7J+117do1brnllhg5cmSMGjUqPvvss4j4/iDkkEMOib/+9a/x3HPPxUsvvRRTpkyJli1bxpIlS/JC7U8//TRmzJixWayzzzzzTEyZMiX3V+W12c62atUqnn766bWex6o+2xVtLOva8n1fkyZNSn0GVapUiZYtW0ZRUVHMmzev1PAfnrW5JhUrVow//vGP8ac//Sm+/vrrtZpu8+bNS60Ta7OP23XXXWPp0qXxySeflJr2D880btSoUZx44olx//33xxlnnBG33HJLbljdunWjZ8+ecccdd8S1114bN998c0Ss/7aJTd92220Xzz77bDz00EOlrkyADW327Nlx+umnxy233BJ77bVXdO/ePS+sXpfjlRdffDF69uwZhx9+ePz85z+PBg0axNy5c1c7zrpMf03HO2uzr10bm8tvpZYtW670t1GzZs1KBUH8NL755pvo0aNHnHDCCdGhQ4e49dZbY8KECfGPf/wjIiJ+97vfxZdffhk33HDDes+jfPny8c0336xyuOOk/23Cx03AwoULY/LkyXmv9b2E4KyzzoqXXnopTj755Jg8eXLMnDkzHn744dwB5tZbbx2FhYXxt7/9Ld555514+OGHc2elbShnnHFGPPLII/Haa69Fhw4dok2bNnHYYYfFE088EXPnzo3x48fHn/70p9xGpV+/fjFkyJC47bbbYubMmXHJJZfEG2+8scYzko455pioU6dOHHroofHiiy/GnDlz4vnnn49TTz013n///ZgzZ04MGjQoXnrppXj33XfjySefzIUP33zzTZxyyinx3HPPxbvvvhvjxo2LCRMmrPLH8sCBA2P48OFx0003xcyZM+Pqq6+O+++/P84888wN+tltbvbdd9/Ycccd47LLLouI7w+4XnvttXjiiSdixowZce65565VUPVDyy/B7dOnT7zyyisxceLEOP744/PO7OrQoUO0atUqjjnmmHj99dfj1Vdfje7du8c+++zzk17+ccwxx0RxcXH06NEj3nzzzXj22WejX79+0a1bt9zp+qsab32/2xHfX+I6Z86cmDx5cixYsCBKSkrWuuZtt902Dj300DjvvPMiIuK8886LESNGxAUXXBBvvfVWTJs2LfeX8YiIjh07xnbbbRc9evSIN954I8aNGxfnnHNORKz+7NSIiAsuuCAGDx4c1113XcyYMSOmTJkSw4YNi6uvvjoivr9M6Z///Ge8/fbbMWPGjLj33nujQYMGUbNmzRg+fHgMGTIk3nzzzXjnnXfi9ttvj0qVKkXjxo1j++23j0MPPTT69OkTY8eOjX//+99x7LHHxpZbblnqEqGNXUlJSXz00UfxwQcfxOuvvx6XXXZZHHrooXHQQQdF9+7dIyLWajt7/vnnx9133x3nn39+TJs2LaZMmRJ/+ctfVjrP1X22K9pY1rWTTz45Pvvss/jd734Xr776arzzzjvx5JNPRq9evWLp0qVRrVq1OPPMM+P000+P2267LWbPnh2TJk2K66+/Pm677bZ1mtfRRx8dBQUFccMNN6zVdE844YR4++2346yzzooZM2bEPffcE8OHD4+I1a8jzZo1i2OOOSa6d+8e999/f8yZMycmTJgQl19+eYwePToiIk477bR44oknYs6cOfH666/HM888k9sOnHfeefHQQw/FrFmz4q233op//etfuWHru21i89CsWbN49tlnY9SoUXHaaaeVdTlswpbvo374WrBgQUR8f8lyt27dolOnTnHcccfFsGHD4s0334yrrroqN36TJk3ilVdeiblz58aCBQtWexZt06ZN4/7774/JkyfHv//97zj66KPXeNbtuhwPrel4Z232tWtrc/itdMYZZ8TTTz8dF198ccyYMSNuu+22+Pvf/+63URk6++yzY9myZbmrQLbeeuu46qqrYuDAgTF37txo06ZNnHHGGXHGGWfEgAEDYuzYsfHuu+/Gyy+/HEOGDImCgoK8W0+llHLr9Zw5c+Lmm2+OJ554Yo3H0o6T/of9VDeXZP306NEj95CHH76WP0kpVvLQhkmTJuXG/+9//5siIu+R8q+++mrq2LFjqlq1aqpSpUpq1apV3lNN77rrrtSkSZNUVFSU2rRpkx5++OG86S6/0fPyG7yuzg/r+6GOHTvmnsS6aNGi1K9fv7TFFlukihUrpkaNGqVjjjkm7wEFF110UapTp06qWrVq6tWrV+rfv3/aa6+98j6nlT14Yf78+al79+6pTp06qaioKG277bapT58+aeHChemjjz5Khx12WGrYsGEqLCxMjRs3Tuedd15aunRpKikpSf/3f/+XGjVqlAoLC9MWW2yRTjnllNxDeVZ84ExKKd1www1p2223TRUrVkzNmjVLI0aMWONnUaNGjVI35t1crer/6M4770yFhYVp3rx56dtvv009e/ZMNWrUSDVr1kwnnXRSOvvss0vdMHvF6Zx66ql5T8+dP39+OvDAA1NRUVHaeuut04gRI/IegpFSSu+++2465JBDUpUqVVK1atXSb3/729wNglNa+U3IVzbvld0M/YfW9HCXN954I7Vv3z4VFxenWrVqpT59+uQe7rSqeS5fxvX5bqeU0rfffpuOPPLIVLNmzRQRq/wOrqr2cePG5T3U5/HHH889Ubx69eppzz33zHsC6rRp01K7du1SYWFhat68eXrkkUdSRKTHH388pbTybddyd955Z9pll11SYWFh+tnPfpZ+9atf5Z6EefPNN6dddtklValSJVWvXj3tt99+6fXXX08ppfTAAw+kX/ziF6l69eqpSpUqaa+99kpPPfVUbrqfffZZ6tatW6pRo0aqVKlS6ty5c+7JdymtfB3f2Pxw/1ChQoVUt27d1KFDhzR06NC8hyKltHbb2VGjRuU+6zp16qQjjjgiN+yH68+aPtsNsa5dc801qXHjxmv1Oay4bV3VOjljxox0+OGHp5o1a6ZKlSql5s2bp9NOOy13o/1ly5al6667Lu2www6pYsWKqW7duqlz5865px6uzKrmdemll6a6deumL774Yq2m+9BDD6WmTZumoqKitO+++6Ybb7wxRcRq9zkppbR48eJ03nnnpSZNmqSKFSumBg0apMMPPzy98cYbKaWUTjnllLTddtuloqKiVLdu3dStW7e0YMGClNL3D29q0aJFqlSpUqpVq1Y69NBD0zvvvJOb9vpum9h0rfh9njp1aqpXr14aMGDAWu17V1z3U0pp5513Tueff35mNbPxWtVvmB122CGllNKFF16YGjZsmNsmpZTSgw8+mAoLC3PHA9OnT0977bVX7qF3c+bMWeXvkDlz5qT27dunSpUqpUaNGqW///3vazxGW9Xx0Kp+v6zpeGdt9rUr2lx/K6WU0n333ZdatmyZKlasmLbeeut0xRVX5M17ZdsMsvHcc8+l8uXLpxdffLHUsE6dOuU9wHHkyJFp3333TTVq1EgVK1ZMW221VTr66KPzHua5/AEvy19FRUWpWbNm6dJLL817MJnjpEPX4n/nf0dBSqu4+RVsxDp27BgNGjTI3XcO2HSMGzcufvnLX8asWbNW+RAn+F926aWXxk033ZR3uToArC2/ldicOU7aNHngDBu9r7/+Om666abo3LlzlC9fPu6+++546qmnYsyYMWVdGrAWHnjggahatWpsv/32MWvWrDj11FOjXbt2gkf4/91www2xxx57RO3atWPcuHFxxRVXxCmnnFLWZQGwCfBbic2d46TNg/CRjV5BQUGMHj06LrnkkigpKYkddtghRo0aFR06dCjr0oC18MUXX8Qf/vCHeO+996JOnTrRoUOHvHs6wf+65ffo+uyzz2LrrbeOM844I/ewAQBYHb+V2Nw5Tto8uOwaAAAAAMiEp10DAAAAAJkQPgIAAAAAmRA+AgAAAACZED4CAAAAAJkQPgIAAAAAmRA+AgCwSXjuueeioKAgPv/887Uep0mTJnHttddmVhMAAKsnfAQAYIPo2bNnFBQUxIknnlhqWN++faOgoCB69uz50xcGAECZET4CALDBNGrUKP75z3/GN998k2v79ttv4+67746tt966DCsDAKAsCB8BANhgdtttt9h6663j/vvvz7Xdf//90ahRo9h1111zbSUlJdG/f/+oV69eFBcXxy9/+cuYMGFC3rRGjx4dzZo1i0qVKkX79u1j7ty5peY3fvz4+NWvfhWVKlWKRo0aRf/+/eOrr77KbPkAAFg3wkcAADao4447LoYNG5Z7P3To0OjVq1denz/84Q8xatSouO222+L111+Ppk2bRufOneOzzz6LiIj33nsvjjjiiDjggANi8uTJcfzxx8fZZ5+dN40pU6ZE586d44gjjog33ngjRo4cGWPHjo1TTjkl+4UEAGCtCB8BANigunXrFmPHjo25c+fGu+++G+PGjYtjjz02N/yrr76KG2+8Ma644oro0qVLtGzZMm655ZaoVKlSDBkyJCIibrzxxth2223jmmuuiR122CGOOeaYUveLvOKKK+Loo4+O0047Lbbffvto27Zt/PWvf40RI0bEt99++1MuMgAAq1ChrAsAAGDzUqdOnTjwwAPjtttui5RSHHjggVGnTp3c8NmzZ8d3330X7dq1y7VVrFgx9txzz5g2bVpEREybNi322muvKCgoyPVp06ZN3nwmTpwYs2bNijvvvDPXllKKZcuWxZw5c6JFixZZLSIAAGtJ+AgAwAbXq1ev3OXP119/fd6wlFJERF6wuLx9edvyPquzbNmyOOGEE6J///6lhnm4DQDAxsFl1wAAbHD7779/LF68OBYvXhydO3fOG9a0adMoLCyMsWPH5tq+++67eO2113JnK7Zs2TJefvnlvPFWfL/bbrvFW2+9FU2bNi31KiwszGjJAABYF8JHAAA2uPLly8e0adNi2rRpUb58+bxhVapUiZNOOikGDhwYjz/+eEydOjX69OkTX3/9dfTu3TsiIk488cSYPXt2DBgwIKZPnx533XVXDB8+PG86Z511Vrz00ktx8sknx+TJk2PmzJnx8MMPR79+/X6qxQQAYA2EjwAAZKJ69epRvXr1lQ7785//HEceeWR069Ytdtttt5g1a1Y88cQT8bOf/Swivr9setSoUfHII4/EzjvvHDfddFNcdtlledNo1apVPP/88zFz5szYe++9Y9ddd41zzz03GjZsmPmyAQCwdgrS2txQBwAAAABgHTnzEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMiE8BEAAAAAyITwEQAAAADIhPARAAAAAMjE/wfNrdYxg4D9zwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,6))\n",
    "sns.barplot(x='Model' ,y='Score',data=cost_results)\n",
    "plt.title('Model Accuracy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "008e8f5d",
   "metadata": {},
   "source": [
    "#  Observation\n",
    "\n",
    "Here we can see that our Random Forest Regressor only have the High Accuracy score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beffd3e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
